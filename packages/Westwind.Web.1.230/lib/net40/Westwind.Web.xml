<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Web</name>
    </assembly>
    <members>
        <member name="T:Westwind.Web.ScriptLoader">
            <summary>
            Class that handles embedding of common script files like jQuery into 
            a page or return complete script tags for insertion into a ViewPage as a string.
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptLoader.jQueryLoadMode">
            <summary>
            Determines what location jQuery is loaded from
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptLoader.jQueryCdnUrl">
            <summary>
            jQuery CDN Url on Google
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptLoader.jQueryCdnFallbackUrl">
            <summary>
            Fallback Url if CDN can't be reached.
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptLoader.jQueryUiCdnUrl">
            <summary>
            jQuery CDN Url on Google
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptLoader.jQueryUiLocalFallbackUrl">
            <summary>
            jQuery UI fallback Url if CDN is unavailable or WebResource is used
            Note: The file needs to exist and hold the minimized version of jQuery ui
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptLoader.jQueryUiCssBaseUrl">
            <summary>
            The url the jQuery UI base CSS theme. Used in jQueryUiCssLink. Should point
            at the jQuery UI base theme - the theme is replaced either explicitly or from
            the jQueryUiTheme property value.
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptLoader.jQueryUiTheme">
            <summary>
            The theme that is applied to the jQueryUiCssBaseUrl
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.LoadjQuery(System.Web.UI.Control,System.String)">
            <summary>
            Loads jQuery depending on configuration settings (CDN, WebResource or site url) 
            and injects the full script link into the page.
            </summary>
            <param name="control"></param>
            <param name="jQueryUrl">Optional url to jQuery as a virtual or absolute server path</param>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.jQueryLink(Westwind.Web.jQueryLoadModes,System.String)">
            <summary>
            Inserts a script link to load jQuery into the page based on the jQueryLoadModes settings
            of this class. Default load is by CDN plus WebResource fallback
            </summary>
            <param name="url">
            An optional explicit URL to load jQuery from. Url is resolved. 
            When specified no fallback is applied
            </param>        
            <returns>full script tag and fallback script for jQuery to load</returns>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.jQueryUiLink(Westwind.Web.jQueryLoadModes,System.String)">
            <summary>
            Inserts a script link to load jQuery into the page based on the jQueryLoadModes settings
            of this class. Default load is by CDN plus WebResource fallback
            </summary>
            <param name="url">
            An optional explicit URL to load jQuery from. Url is resolved. 
            When specified no fallback is applied
            </param>        
            <returns>full script tag and fallback script for jQuery to load</returns>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.jQueryUiCssLink(System.String)">
            <summary>
            Returns the global jQuery UI Url and theme set on this class
            </summary>
            <param name="theme"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.wwJqueryLink(Westwind.Web.jQueryLoadModes,System.String)">
            <summary>
            Returns a fully qualified script tag for loading ww.jquery.js
            </summary>
            <param name="jQueryLoadMode"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.LoadjQuery(System.Web.UI.Control)">
            <summary>
            Loads the jQuery component uniquely into the page
            </summary>
            <param name="control"></param>
            <param name="jQueryUrl">Optional Url to the jQuery Library. NOTE: Should also have a .min version in place</param>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.LoadwwjQuery(System.Web.UI.Control,System.Boolean)">
            <summary>
            Loads the ww.jquery.js library from Resources at the end of the Html Header (if available)
            </summary>        
            <param name="control"></param>
            <param name="loadjQuery"></param>
        </member>
        <member name="M:Westwind.Web.ScriptLoader.LoadjQueryUi(System.Web.UI.Control,System.String)">
            <summary>
            Loads the appropriate jScript library out of the scripts directory and 
            injects into a WebForms page.
            </summary>
            <param name="control"></param>
            <param name="jQueryUiUrl">Optional url to jQuery as a virtual or absolute server path</param>
        </member>
        <member name="P:Westwind.Web.ScriptLoader.CachedPage">
            <summary>
            Internally used Page instance so we can get access to
            a Page instance when no Page might be available. To Access ClientScript etc.
            </summary>
        </member>
        <member name="T:Westwind.Web.jQueryLoadModes">
            <summary>
            The location from which jQuery and jQuery UI are loaded
            in Release mode.
            </summary>
        </member>
        <member name="T:Westwind.Web.Services.ShareButtons">
            <summary>
            Class that holds a few static string definitions for
            embedding Share on Google+ and Twitter
            </summary>
        </member>
        <member name="M:Westwind.Web.Services.ShareButtons.GooglePlusPlusOneButton(System.String,System.String,System.Int32)">
            <summary>
            Places a Google+  +1 and Share button in the page
            </summary>
            <param name="url">The Url to share. If not provided the current page is used</param>
            <param name="buttonSize">small,medium,standard,tall</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Services.ShareButtons.ShareOnTwitter(System.String,System.String,System.String,System.String)">
            <summary>
            Inserts a Tweet button to share tweet on Twitter with an image link
            </summary>
            <param name="text">The text to present</param>
            <param name="twitterShareAccount"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.Services.Gravatar">
            <summary>
            Implements the Gravatar API for retrieving a Gravatar image to display
            </summary>
        </member>
        <member name="M:Westwind.Web.Services.Gravatar.GetGravatarLink(System.String,System.Int32,System.String,System.String)">
            <summary>
            Returns a Gravatar image url for an email address
            </summary>
            <param name="Email">Email address to display Gravatar for</param>
            <param name="Size">Size in pixels (square image) (80)</param>
            <param name="Rating">Parental Guidance rating of image (PG)</param>
            <param name="DefaultImageUrl">Url to image if no match is found. 
             If not passed gravatar provides default image</param>
        </member>
        <member name="M:Westwind.Web.Services.Gravatar.GetGravatarImage(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns a Gravatar Image Tag that can be directly embedded into
            an HTML document.
            </summary>
            <param name="Email">Email address to display Gravatar for</param>
            <param name="Size">Size in pixels (square image) (80)</param>
            <param name="Rating">Parental Guidance rating of image (PG)</param>
            <param name="ExtraImageAttributes">Any extra attributes to stick on the img tag</param>
            <param name="DefaultImageUrl">Url to image if no match is found. 
             If not passed gravatar provides default image</param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.HttpRequestBaseExtensions">
            <summary>
            HttpRequest Extension methods to facilitate various input retrieval tasks tasks
            </summary>
        </member>
        <member name="M:Westwind.Web.HttpRequestBaseExtensions.IsFormVar(System.Web.HttpRequestBase,System.String)">
            <summary>
            Determines whether a form variable exists
            </summary>
            <param name="request"></param>
            <param name="formVarName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.HttpRequestBaseExtensions.ParamsInt(System.Web.HttpRequestBase,System.String,System.Int32)">
            <summary>
            Returns a value via Params[] and attempts
            to convert it to an integer.
            </summary>
            <param name="request"></param>
            <param name="FormVarName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.HttpRequestBaseExtensions.ParamsDecimal(System.Web.HttpRequestBase,System.String,System.Decimal)">
            <summary>
            Returns a value via Params[] and attempts
            to convert it to a decimal value.
            </summary>
            <param name="request"></param>
            <param name="FormVarName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.Controls.AjaxMethodCallback">
            <summary>
            The AjaxMethodCallback control provides an easy mechanism for making page or 
            control level method callbacks from an HTML page. Working with both client 
            side and server side logic you can make remote method calls from the client
             using two-way JSON serialization to access server side content from client
             pages.
            Methods are mapped from server to the client with an optional client proxy 
            class that allows making direct method calls to the server. Methods on the 
            server are marked up with a [CallbackMethod] to indicate that the methods 
            are accessible for callbacks. These methods can be implemented on the page,
             any user control, or custom server control. The latter also allows control
             developers to dynamically route callbacks to their own controls.
            
            Methods called use JSON to pass data and simple types, hierarchical 
            objects, arrays and IList based classes are supported for two-way 
            transfers. DataSets/DataTables/DataRows are support for downloading only at
             this time.
            
            This control makes accessing server side content as easy as calling a 
            single proxy method and implementing a single client side handler to 
            receive the result value as a strongly typed object.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.AjaxMethodCallback.ClientScriptProxy">
            <summary>
            Wrapper ClientScript used to allow use ScriptManager methods
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.OnPreRender(System.EventArgs)">
            <summary>
            This method just builds the various JavaScript blocks as strings
            and assigns them to the ClientScript object.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.GenerateControlSpecificJavaScript">
            <summary>
            Generates the ControlSpecific JavaScript. This script is safe to
            allow multiple callbacks to run simultaneously.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.GenerateClassWrapperForCallbackMethods">
            <summary>
            Creates the JavaScript client side object that matches the 
            server side method signature. The JScript function maps
            to a CallMethod() call on the client.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.GenerateClassWrapperForWcfAndAsmx">
            <summary>
            Create
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AjaxMethodCallback.CreateControlInstanceOnPage(System.Web.UI.Control,System.Object)">
            <summary>
            Can be called to create a new instance of the AjaxMethodCallbackControl
            and attach it to the current page. This can be useful for control developers
            so they don't have to manually add the control to the page.
            
            The call to this method should be made pre-OnLoad() preferrably in OnInit().
            </summary>
            <param name="page">Instance of the Page object</param>
            <returns>An instance of the Callback Control</returns>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ServerUrl">
            <summary>
            The Url to hit on the server for the callback to return the result. Note: Not used when doing a MethodCallback
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.Timeout">
            <summary>
            Timeout in milliseconds for the request.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.IsCallback">
            <summary>
            Determines whether the current request is in a callback. 
            
            This property is used internally to trap for method processing, but you can
            also use this in your page or control level code to determine whether you 
            need to do any special processing based on the callback situation.        
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.PostBackMode">
            <summary>
            Detemines how data is sent back to the server on a method call.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.PostBackFormName">
            <summary>
            The name of the form from which POST data is sent to the server if 
            posting back with form data. Empty value will post back all 
            form variables of all forms.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.PageProcessingMode">
            <summary>
            Determines when Page level callbacks are processed in the Page pipeline.
            By default processing occurs in Load, but you can opt to process  
            callbacks in Init for better performance if you don't rely on any page
            specific logic or POST values from controls. 
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ServiceType">
            <summary>
            The type of service to call. For AjaxMethodCallback call the current page, 
            control or CallbackHandler. For WCF and ASMX point at ServerUrl at 
            a WCF or ASMX Service respectively.
            
            This method affects only what type of client proxy is created to allow
            for straight method callbacks and for all but Page callbacks you'll need
            to set the ClientProxyTargetType in code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.JsonDateEncoding">
            <summary>
            Determines how the date format is serialized into JSON.
            
            ISO is used by default since latest browsers support this now.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ScriptLocation">
            <summary>
            Determines where the ww.jquery.js resource is loaded from. WebResources, Url or an empty string (no resource loaded)
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.jQueryScriptLocation">
            <summary>
            Determines where the jquery.js resource is loaded from. WebResources, Url or leave empty to do nothing
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.TargetInstance">
            <summary>
            An instance of the object that is going to handle the callbacks on the
            the server. 
            
            If not set defaults to the Page.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ClientProxyTargetType">
            <summary>
            A type that is used to generate the Client Proxy Javascript
            class that gets injected into the page with matching methods.
            
            This property defaults to the current Page's type, but you can
            override it to any object's type that matches your TargetInstance.
            
            You can pass null to indicate you don't want to generate a proxy
            and instead call Proxy.callMethod explicitly which is a little more
            light weight in terms of processing and Javascript generation.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.GenerateClientProxyClass">
            <summary>
            If true generates a proxy class that maps each of the methods exposed with 
            [CallbackMethod] on the current page, user control or control and exposes 
            it as a client side class. The name of the class will be the same as the ID
             of the AjaxMethodCallback control.
            
            By default the class is generated. If false the class is not generated and 
            you can use the client side AjaxMethodCallback object and use declaritive 
            code to create the method callbacks manually.
            <seealso>Class AjaxMethodCallback</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.UniqueID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.ClientID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AjaxMethodCallback.OverrideClientID">
            <summary>
            Determines whether ClientID and UniqueID values are returned
            as just as the ID or use full naming container syntax.
            
            The default is true which returns the simple ID without
            naming container prefixes.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.AjaxMethodCallbackDesigner">
            <summary>
            Control designer used so we get a grey button display instead of the 
            default label display for the control.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.CallbackProcessingModes">
            <summary>
            Determines when page level callbacks are processed
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.CallbackProcessingModes.PageInit">
            <summary>
            Provides best performance for page callbacks. No page logic accessible
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.CallbackProcessingModes.PageLoad">
            <summary>
            Default behavior fires callback methods in Page Load after ViewState and 
            Form vars have been processed by the pageLoad
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.CallbackProcessingModes.PagePreRender">
            <summary>
            Fires Callback method in PreRender after Load processing is completed.
            Note events on controls may or may not have fired yet.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.AjaxMethodCallbackServiceTypes">
            <summary>
            Determines what kind of client proxy is created
            for you
            </summary>
        </member>
        <member name="T:Westwind.Web.CallbackHandler">
            <summary>
            CallbackHandler is an Http Handler base class that allows you to create a
             class with methods marked up with a [CallbackMethod] attribute which are 
            then exposed for remote execution. The handler routes the to the methods 
            and executes the call and returns the results - or any errors - as JSON 
            strings.
            
            To use this service you need to create an HttpHandler (either .ASHX or a 
            class registered in web.config's httpHandler section) and then add methods 
            with the [CallbackMethod] attribute and that's it. The service accepts 
            inputs via query string and POST data.
            
            If you use the AjaxMethodCallbackControl the process of calling service
            methods is fully automated including automatic client proxy creation and
            you can call methods with individual parameters mapped from client to server.
            
            Alternately you can also use plain REST calls that pass either no parameters
            and purely access POST data, or pass a single JSON object that can act as 
            a single input parameter.
            
            The service can be accessed with:
            
            MyHandler.ashx?CallbackMethod=MethodToCall
            
            POST data can then be passed in to act as parameters:
            
            &lt;&lt;ul&gt;&gt;
            &lt;&lt;li&gt;&gt; &lt;&lt;b&gt;&gt;Raw Post Buffer&lt;&lt;/b&gt;&gt;
            You simply pass raw POST data that you can access with Request.Form in the 
            handler
            
            &lt;&lt;li&gt;&gt; &lt;&lt;b&gt;&gt;JSON value or object 
            string&lt;&lt;/b&gt;&gt;
            Alternately you can set the content type to application/json and pass a 
            JSON string of a value or object which calls the server method with a 
            single parameter of matching type.
            &lt;&lt;/ul&gt;&gt;
            
            For more information on how to call these handlers see 
            <see cref="!:_24I0VDWUR">Using CallbackHandler with REST Calls</see>.
            </summary>
        </member>
        <member name="M:Westwind.Web.CallbackHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Handle the actual callback by deferring to JsonCallbackMethodProcessor()
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Westwind.Web.CallbackHandler.Response">
            <summary>
            Shortcut to the ASP.NET Response object.
            
            Allows easy access to the ASP.NET Response object to allow formatting of 
            the response. Note that CallbackHandler will set default content types and 
            encoding for a request which can be overridden in your code if necessary.
            
            &lt;&lt;code lang="C#"&gt;&gt;[CallbackMethod(RouteUrl="stocks/{symbol}")]
            public StockQuote GetStockQuote(string symbol)
            {
                Response.Cache.SetExpires(DateTime.UtcNow.Add(new TimeSpan(0, 2, 0)));
            
                StockServer server = new StockServer();
                return server.GetStockQuote(symbol);
            }&lt;&lt;/code&gt;&gt;
            <seealso>Class CallbackHandler</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.CallbackHandler.Request">
            <summary>
            Shortcut reference to active ASP.NET Request object
            </summary>
        </member>
        <member name="P:Westwind.Web.CallbackHandler.Context">
            <summary>
            Shortcut to the current HttpContext instance
            </summary>
        </member>
        <member name="P:Westwind.Web.CallbackHandler.IsReusable">
            <summary>
            This handler is not thread-safe
            </summary>
        </member>
        <member name="P:Westwind.Web.CallbackHandler.RouteData">
            <summary>
            Optionally store RouteData on this handler
            so we can access it internally
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.AutoComplete">
            <summary>
            A WebForms wrapper control around the jQuery UI AutoComplete control. This control 
            provides code based AJAX callbacks either to a specified service URL (which allows calls
            to a CallbackHandler HTTP Handler service for example) or directly to the page using an
            event based callback to the controls CallbackHandler event.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.RegisterResources(Westwind.Web.ClientScriptProxy)">
            <summary>
            Code that embeds related resources (.js and css)
            </summary>
            <param name="scriptProxy"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.OnPreRender(System.EventArgs)">
            <summary>
            Most of the work happens here for generating the hook up script code
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.AutoComplete.AutoCompleteCallbackHandler(System.String)">
            <summary>
            Method that handles the actual callback routing.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.ServerUrl">
            <summary>
            Service Url to explicitly call to retrieve data. Not used if the OnServiceHandlerCallback event is set.
            Alternately you can implement the CallbackHandler delegate.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.CallbackHandler">
            <summary>
            An EventHandler that allows you to serve AJAX data to the AutoComplete 
            client control. The handler receives a string input of the search term
            typed into the control and should return an array of objects.
            Each object should have at minimum 'label' and 'value' properties.
            
            This event handler should be set in OnInit of page/control
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.AutoFocus">
            <summary>
            Determines whether the selected item in the list will automatically be focused
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.Delay">
            <summary>
            The delay in milliseconds the Autocomplete waits after a keystroke to activate itself. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.MinLength">
            <summary>
            The minimum length of the input string before autocomplete kicks in
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.Theme">
            <summary>
            Theme applied to the base CSS url. Replaces /base/ with the theme selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.CssBasePath">
            <summary>
            The path to the base CSS Theme. Path is adjusted 
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.AutoComplete.OnClientSelection">
            <summary>
            The client selection handler called when a selection is made.
            The handler receives two parameter - a ssda
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DragPanel">
            <summary>
            A draggable Panel control that can be dragged around the current browser window.
            Dragging is supported for the panel and initiated through a drag handle control - 
            a control that is contained in the window and acts as the draggable hot spot that
            initiates dragging. You can also make the Panel itself the drag handle.
            
            The control can also optionally display a close button that allows hiding the control
            by changing its client side visibility.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DragPanel.ScriptProxy">
            <summary>
            Internal reference of the Client Script Proxy - set up in OnInit
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.DragHandleID">
            <summary>
            The ID of the control that is used as the drag handle to initiate a drag operation.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Draggable">
            <summary>
            Determines whether this control is draggable
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Cursor">
            <summary>
            The cursor property for the dragged handle or object
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.DragDelay">
            <summary>
            Delay before dragging starts in milliseconds
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Closable">
            <summary>
            Flag that determines whether a closebox is rendered into the &lt;div&gt; 
            specified as a drag handle.        
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.CloseBoxImage">
            <summary>
            Optional Image used for close box if ShowCloseBoxOnDragHandle is true.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.FadeOnClose">
            <summary>
            Fades out the window when it is closed with the close button
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.PanelOpacity">
            <summary>
            Optional Opacity level in decimal percentage values (ie. 0.65 for 65%) for the panel background. Supported only in Mozilla and IE browsers. The value is given as fractional percentage.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ShadowOffset">
            <summary>
            Optionally used to specify a shadow below the panel. If 0 no shadow is created. If greater than 0 the panel is rendered.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ShadowOpacity">
            <summary>
            The opacity of the Panel's shadow if PanelShadoOffset is set.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.Centered">
            <summary>
            Determines whether the panel is centered in the page
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ClientDialogHandler">
            <summary>
            Client side event handler that is called whenever a click event occurs anywhere inside of the
            modal dialog.
            
            Client handler is a jQuery event handler and receives this as the element clicked plus
            the standard jQuery event object. You can check id and match against specific 
            control ids:
            
            if (id == "btnClose") doA();
            if (id == "btnCancel") doB();
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.ScriptLocation">
            <summary>
            Determines where the ww.jquery.js resource is loaded from. WebResources, Url or an empty string (no resource loaded)
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DragPanel.jQueryScriptLocation">
            <summary>
            Determines where the jquery.js resource is loaded from. WebResources, Url or leave empty to do nothing
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.HoverPanel">
            <summary>
            The HoverPanel class provides an easy to use base AJAX control that  
            allows quick access to server side content from a URL and embed it into the
             control's content. The control provides various visual customization 
            aspects from shadows, transparency, the ability to drag it around and close
             it as well as pop up and auto hide.
            
            The most prominent feature of this control is to provide auto-popup 
            functionality that shows context sensitive content while hovering and 
            hiding it when moving off.
            
            &lt;&lt;img src="images/HoverWindow.png"&gt;&gt;
            
            For more details on how the control works, see the 
            <see cref="!:_1Q100DYWK">HoverPanel Windows</see> topic. 
            This control  allows calling back to explict URLs
            either on the same page or calling other URLs within the same site that 
            feed the content to be rendered in the  hover panel control.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.HoverPanel.#ctor">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.HoverPanel.OnPreRender(System.EventArgs)" -->
        <member name="M:Westwind.Web.Controls.HoverPanel.GenerateControlSpecificJavaScript">
            <summary>
            Generates the ControlSpecific JavaScript. This script is safe to
            allow multiple callbacks to run simultaneously.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.HoverPanel.GetCallbackEventReference(System.String)">
            <summary>
            Returns an Event Callback reference string that can be used in Client
            script to initiate a callback request. 
            </summary>
            <param name="QueryStringExpression">
            An expression that is evaluated in script code and embedded as the second parameter.
            The value of this second parameter is interpreted as a QueryString to the URL that
            is fired in response to the request to the server.
            
            This expression can be a static string or any value or expression that is in scope
            at the time of calling the event method. The expression must evaluate to a string
             
            Example: 
            string GetCallbackEventReference("'CustomerId=' + forms[0].txtCustomerId.value + "'");
             
            A callback event reference result looks like this:
            
            ControlID_StartCallback(event,'CustomerId=_12312')
            </param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.ClientCompleteHandler">
            <summary>
            The client script event handler function called when the remote call 
            completes just before the result content is displayed. Allows modification 
            of the content and possibly blocking of the content by returning false.
            
            For more information see the HoverPanel client class and its 
            <see cref="!:_1WD06AVLG">callbackHandler method</see>. The handler is  passed the result from the 
            callback and you can return false to stop  rendering of the hover window.
            <seealso>Class HoverPanel</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.ServerUrl">
            <summary>
            The Url to hit on the server for the callback to return the result. Note: Not used when doing a MethodCallback
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.Timeout">
            <summary>
            The timeout for the server request to retrieve data in milliseconds
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.NavigateDelay">
            <summary>
            Determines if the navigation is delayed by a hesitation. Useful for link hovering.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.IsCallback">
            <summary>
            Determines whether this request is a callbackDetermines whether the current
             request is a callback from the AjaxMethodCallback or HoverPanel control.
            
            This property is used internally to trap for method processing, but you can
             also use this in your page or control level code to determine whether you 
            need to do any special processing based on the callback situation.
            <seealso>Class HoverPanel</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.EventHandlerMode">
            <summary>
            Determines the how the event is handled  on the callback request. ShowHtmlMousePosition shows the result in a window. CallEventHandler fires the specified script function.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.HtmlTargetClientId">
            <summary>
            The client ID of the control that receives the hoverpanel output. This affects only the HTML if empty the hoverpanel is used.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.AdjustWindowPosition">
            <summary>
            if set tries to move up the window if it's too low to fit content. This setting can cause problems with very large content.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.AutoCloseHoverWindow">
            <summary>
            Determines whether the window is closed automatically if you mouse off it
            when the window is a hover window.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.HoverOffsetRight">
            <summary>
            The right offset when the the panel is shown at the mouse position
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.HoverOffsetBottom">
            <summary>
            The bottom offset when the the panel is shown at the mouse position
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.PostBackMode">
            <summary>
            If true causes the page to post back all form variables.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.PostBackFormName">
            <summary>
            The name of the form from which values are posted back to the server. Note only a single form's 
            values can be posted back!
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.IFrameHeight">
            <summary>
            The height of an IFRAME if mode is IFrame related. Use this if you need to specifically size the IFRAME within the rendered panel to get the size just right.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.UniqueID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.ClientID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HoverPanel.OverrideClientID">
            <summary>
            Determines whether ClientID and UniqueID values are returned
            as just as the ID or use full naming container syntax.
            
            The default is true which returns the simple ID without
            naming container prefixes.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowHtmlAtMousePosition">
            <summary>
            Displays a hover window at the current mouse position. Calls a URL 
            specified in the ServerUrl property when the call is initiated. The call 
            initiation can add an additional queryString to specify 'parameters' for 
            the request.
            <seealso>Enumeration HoverEventHandlerModes</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowHtmlInPanel">
            <summary>
            Shows the result of the URL in the panel. Works like ShowHtmlInPanel
            except that the panel is not moved when the callback completes.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowIFrameAtMousePosition">
            <summary>
            Displays a URL in an IFRAME which is independent of the
            current page.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.ShowIFrameInPanel">
            <summary>
            Shows an IFRAME in a panel
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HoverEventHandlerModes.GetHttpResponse">
            <summary>
            Calls an external Page and returns the HTML result into the 
            ClientEventHandler specified for the control. This is a really high level 
            mechanism.
            <seealso>Enumeration HoverEventHandlerModes</seealso>
            </summary>        
        </member>
        <member name="T:Westwind.Web.Controls.jQueryDatePicker">
            <summary>
            ASP.NET jQuery DatePicker Control Wrapper
            by Rick Strahl
            http://www.west-wind.com/
            
            License: Free
            
            Simple DatePicker control that uses jQuery UI DatePicker to pop up 
            a date picker. 
            
            Important Requirements:
            ~/scripts/jquery.js             (available from WebResource)
            ~/scripts/jquery-ui.js   (custom build of jQuery.ui)
            ~/scripts/themes/base           (choose any theme name one theme to display styling)
            
            Resources are embedded into the assembly so you don't need
            to reference or distribute anything. You can however override
            each of these resources with relative URL based resources.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.jQueryDatePicker.RegisterResources(Westwind.Web.ClientScriptProxy)">
            <summary>
            Code that embeds related resources (.js and css)
            </summary>
            <param name="scriptProxy"></param>
        </member>
        <member name="M:Westwind.Web.Controls.jQueryDatePicker.OnPreRender(System.EventArgs)">
            <summary>
            Most of the work happens here for generating the hook up script code
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.jQueryDatePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.SelectedDate">
            <summary>
            The currently selected date
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.DisplayMode">
            <summary>
            Determines how the datepicking option is activated
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.ButtonImage">
            <summary>
            Url to a Calendar Image or WebResource to use the default resource image.
            Applies only if the DisplayMode = ImageButton
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.CalendarCss">
            <summary>
            The CSS that is used for the calendar
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.Theme">
            <summary>
            Theme applied to the base CSS url. Replaces /base/ with the theme selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.CalendarJs">
            <summary>
            Location for the calendar JavaScript
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.jQueryJs">
            <summary>
            Location of jQuery library. Use WebResource for loading from resources
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.DateFormat">
            <summary>
            Determines the Date Format used. Auto uses CurrentCulture. Format: MDY/  month, date,year separator
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.MinDate">
            <summary>
            Minumum allowable date. Leave blank to allow any date
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.MaxDate">
            <summary>
            Maximum allowable date. Leave blank to allow any date.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.OnClientSelect">
            <summary>
            Client event handler fired when a date is selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.OnClientBeforeShow">
            <summary>
            Client event handler that fires before the date picker is activated
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.jQueryDatePicker.ShowButtonPanel">
            <summary>
            Determines where the Close icon is displayed. True = top, false = bottom.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ModalDialog">
            <summary>
            This control allows creating client side pop up window that blocks out the 
            background and brings a dialog to the foreground. This control can be  used
             to replace ugly alert or prompt boxes to pop up rich dialogs that must  be
             edited modally. Any dialog can be popped up like 
            
            The background can be just an opaque color with a transparency value - the 
            default is black at 70% for example which gives a grey looking overlay - or
             can be a custom Html element that is expanded and then made transparent as
             in the following figure.
            
            &lt;&lt;img src="images/wwModalDialog.png"&gt;&gt;
            
            The control is based on DragPanel so the dialogs can be draggable and 
            closable. Events are available to fire when a button or the close button is
             clicked with event firing either on the client or server.
            
            The client side counter part class can be used without this server side  
            control and allows a few extra features, such as a mechanism to display a  
            dialog without controls on the page to map to.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.ModalDialog.Show">
            <summary>
            Shows the dialog as designed without any customizations
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.ModalDialog.Show(System.String,System.String,System.Boolean)" -->
        <member name="P:Westwind.Web.Controls.ModalDialog.BackgroundOpacity">
            <summary>
            The opacity of of the overlay background in a decimal percentage. Default to .85
            </summary>    
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.ContentId">
            <summary>
            The client ID of the element that receives the content message. 
            If not specified the message is written to the body of the control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.HeaderId">
            <summary>
            ID of a header element that receives the Title when calling showDialog()
            on the client. Optional - if not specified the header is not set which 
            means the dialog displays as designed.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.OverlayId">
            <summary>
            Optional Id that is to be used for the shaded Overlay. This allows you
            to create a colored or otherwise designed background that pops over the
            existing content.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.FadeinBackground">
            <summary>
            When true fades in the background by slowly increasing
            opacity of the background
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.ClientDialogHandler">
            <summary>
            Client side event handler that is fired when anything is clicked inside of the
            dialog. This can be a button, a hyperlink or any element.
            
            The even fired will be a jQuery style event with a jQuery event object passed.
            this points at the clicked element.
            
            Handler code should check for specific elements like buttons clicked and
            then based on the id or value decide what action to take.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.zIndex">
            <summary>
            The zIndex value for the overlay and dialog. This value must be 
            higher than any other control on the page in order for the 
            dialog to pop up on top. 
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.UniqueID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ModalDialog.ClientID">
            <summary>
            Override to force simple IDs all around
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ScriptContainer">
            <summary>
            Class that provides script embedding functionality to ASP.NET pages. 
            Features include the ability to use ResolveUrl style src urls to place 
            script includes inline (to the control), in the Header or using standard 
            ASP.NET ClientScript or ScriptManager. The control can also optimize 
            
            scripts if a .min.js script file is available by using the AllowMinScript 
            property on the script.
            
            The purpose of this control is to provide Intellisense compatible script 
            embedding without requiring the ASP.NET AJAX ScriptManager control since 
            that control automatically includes MS AJAX scripts even if none of the MS 
            AJAX features are otherwise used.
            
            Using markup the control can embed scripts like this:
            
            &lt;&lt;code lang="HTML"&gt;&gt;&lt;ww:ScriptContainer ID="scripts" 
            runat="server" RenderMode="Header"&gt;
                &lt;Scripts&gt;
                    &lt;Script Src="Scripts/jquery.js"  
            Resource="jquery"&gt;&lt;/Script&gt;
                    &lt;Script Src="Scripts/ui.core.js"  
            AllowMinScript="true"&gt;&lt;/Script&gt;
                    &lt;Script Src="Scripts/ui.draggable.js"  &gt;&lt;/Script&gt;
                    &lt;Script Src="Scripts/wwscriptlibrary.js"  
            Resource="wwscriptlibrary"&gt;&lt;/Script&gt;
                    &lt;Script Resource="ControlResources.Menu.js" 
            ResourceControl="txtInput" /&gt;
                &lt;/Scripts&gt;
            &lt;/ww:ScriptContainer&gt;
            &lt;&lt;/code&gt;&gt;
            
            The options on the &lt;Script&gt; tag can be found in the 
            <see cref="!:_2EU16Y1L1">ScriptItem class</see>. Unfortunately due to the requirement for an 
            HtmlGeneric control (so Intellisense still works for scripts) there's no 
            Intellisense for the properties of Script elements in markup. They do work 
            however.
            
            Using CodeBehind .NET code, the static Singleton ScriptContainer.Current 
            can be used to add scripts (even if no script instance pre-exists):
            
            &lt;&lt;code lang="C#"&gt;&gt;
            ScriptContainer script = ScriptContainer.Current;
            script.AddScript("~/scripts/wwEditable.js","jquery");  // as  known 
            resource
            script.AddScript("~/scripts/wwEditable.js", true);  // as .min.js
            &lt;&lt;/code&gt;&gt;
            
            Markup scripts always have precendence over scripts embedded in code in 
            terms of rendering order, but you can choose where scripts are rendered to 
            individually - Header, Script, Inline or the default of InheritFromControl.
             This allows some control over where scripts are loaded.
            <seealso>Class ScriptItem</seealso>
            </summary>
            <remarks>
            Only one instance of this component can exist on the page otherwise an 
            exception is thrown.
            </remarks>
        </member>
        <member name="F:Westwind.Web.Controls.ScriptContainer.scriptProxy">
            <summary>
            Internally tracked client script proxy that goes either
            to MS Ajax ScriptManager if available or to Page.ClientScript 
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.OnInit(System.EventArgs)">
            <summary>
            Read the HtmlGeneric Script controls and parse them into
            Internal scripts at page load time
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.OnPreRender(System.EventArgs)">
            <summary>
            Handle writing out scripts to header or 'ASP.NET script body'
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.RegisterScriptItem(Westwind.Web.Controls.ScriptItem)">
            <summary>
            Registers an individual script item in the page
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the scripts contained in this control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(Westwind.Web.Controls.ScriptItem)">
            <summary>
            Adds a script item to the page with full options
            </summary>
            <param name="scriptUrl">The Url to load script from. Can include ~/ syntax</param>
            <param name="renderMode">Determines where the script is rendered</param>
            <param name="allowMinScript">Determines if in non-debug mode .min.js files are used</param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(System.String,Westwind.Web.ScriptRenderModes,System.Boolean)">
            <summary>
            Adds a script to the collection of embedded scripts
            </summary>
            <param name="scriptUrl"></param>
            <param name="renderMode"></param>
            <param name="allowMinScript"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(System.String)">
            <summary>
            Adds a script to the page using the control's rendermode
            </summary>
            <param name="scriptUrl"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.AddScript(System.String,System.Boolean)">
            <summary>
            Adds a script to the page using the control's rendermode and allows specifying of min.js script files in non-debug mode.
            </summary>
            <param name="scriptUrl"></param>
            <param name="allowMinScript"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.LoadControlScript(System.Web.UI.Control,System.String,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            Helper function that is used to load script resources for various AJAX controls
            Loads a script resource based on the following scriptLocation values:
            
            * WebResource
              Loads the Web Resource specified out of ControlResources. Specify the resource
              that applied in the resourceName parameter
              
            * Url/RelativeUrl
              loads the url with ResolveUrl applied
              
            * empty (no value) 
              No action is taken
            </summary>
            <param name="control">The control instance for which the resource is to be loaded</param>
            <param name="scriptLocation">WebResource, a Url or empty (no value)</param>
            <param name="resourceName">The name of the resource when WebResource is used for scriptLocation</param>
            <param name="topOfHeader">Determines if scripts are loaded into the header whether they load at the top or bottom</param>
        </member>
        <member name="M:Westwind.Web.Controls.ScriptContainer.ParseScriptProperties(System.Web.UI.HtmlControls.HtmlGenericControl)">
            <summary>
            Parses HtmlgenericControl attributes into a script object
            </summary>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.Current">
            <summary>
            Returns a current instance of this control if an instance
            is already loaded on the page. Otherwise a new instance is
            created, added to the Form and returned.
            
            It's important this function is not called too early in the
            page cycle - it should not be called before Page.OnInit().
            
            This property is the preferred way to get a reference to a
            ScriptContainer control that is either already on a page
            or needs to be created. Controls in particular should always
            use this property.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.Scripts">
            <summary>
            Collection of ScriptItems
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.InternalScripts">
            <summary>
            Internally stored list of parsed or manually added Scripts
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.RenderMode">
            <summary>
            Determines where scripts are rendered by default. Defaults to script which renders using ClientScript or ScriptManager.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptContainer.MinScriptExtension">
            <summary>
            Script extension for minimized or packed scripts. Used only
            for entries that AllowMinScript=True.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ScriptItem">
            <summary>
            Individual Script Item used inside of a script container.
            This control maps syntax of the standard HTML script tag
            and ads a number of additional properties that are specific
            to script generation.
            
            Note there's no Intellisense on this child item as it is
            rendered as an HtmlGenericControl and parsed into this
            object. Hence the properties below must be manually typed
            in and are not visible to Intellisense.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.Src">
            <summary>
            The src location of the file. This path can include ~ pathing
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.AllowMinScript">
            <summary>
            Determines whether script looks for optimized .min.js file in non-debug mode
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.RenderMode">
            <summary>
            Determines where in the page the script is rendered (HeaderTop,Header,Script,Inline,Inherit)
            <seealso>Class ScriptItem</seealso>
            <seealso>Embedding JavaScript Links with ScriptContainer</seealso>
            <seealso>Enumeration ScriptRenderModes</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.Resource">
            <summary>
            If specified loads a 'known' resource by name from resources rather
            than the script source. This allows using a src url for getting
            debugging but using a WebResource for ensuring the latest version
            is always used at runtime.
            
            Known resources are:
            wwscriptlibrary
            jquery
            calendar
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.ResourceControl">
            <summary>
            A reference to a control in the assembly that holds the resource.
            This is used in lieu of a type so you can specify a control that
            is in the same assembly. Specify an ID in markup or a reference
            in code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.ResourceControlType">
            <summary>
            Instead of providing the Id of a control you can also pass the type of
            a control/object housed in the assembly. The type is used for getting the assembly
            to retrieve resources from.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.FileId">
            <summary>
            The ID for this file when stored in the collection
            of script items. Based on the filename of the script
            (ie. somescript.js). Used to avoid duplication
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.ResourceAssembly">
            <summary>
            Resource assembly - maps to Assembly keyword
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ScriptItem.Version">
            <summary>
            An optional version number that is appended to your
            resource url.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ScriptContainerDesigner">
            <summary>
            Control designer used so we get a grey button display instead of the 
            default label display for the control.
            </summary>
        </member>
        <member name="T:Westwind.Web.Banners.BannerConfiguration">
            <summary>
            The configuration object for the Banner object. This object
            persists its properties into web.config in the wwBanner
            configuration section.    
            </summary>
        </member>
        <member name="F:Westwind.Web.Banners.BannerConfiguration.Current">
            <summary>
            Current instance of the configuration object that's
            always available and active
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerConfiguration.ConnectionString">
            <summary>
            Connection String to the Database
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerConfiguration.BannerManagerHandlerUrl">
            <summary>
            The Url that serves banners for click tracking
            </summary>        
        </member>
        <member name="P:Westwind.Web.Banners.BannerConfiguration.TrackStatistics">
            <summary>
            Determines whether hits and clicks are tracked by the manager
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerConfiguration.BannerTable">
            <summary>
            Name of the banner table
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerConfiguration.BannerClicksTable">
            <summary>
            Name of the Click Tracking table
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerConfiguration.HomeUrl">
            <summary>
            The Url used to go Home off the page
            </summary>
        </member>
        <member name="T:Westwind.Web.Banners.BannerHandler">
            <summary>
            Click handler for the banner.
            
            Use either in an ASHX file and inherit from this handler, 
            or add into web.config HttpHandlers for a specific URL.
            
            Make sure you set the wwBannerConfiguration.wwBannerHandlerUrl 
            to point at what ever location you choose.
            </summary>
        </member>
        <member name="M:Westwind.Web.Banners.BannerHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Main banner manager request handler. This 
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Westwind.Web.Banners.BannerHandler.IsReusable">
            <summary>
            This handler has no state and is reusable
            </summary>
        </member>
        <member name="T:Westwind.Web.Banners.BannerItem">
            <summary>
            Banner Item entity for an individual banner item. This object
            handles the configuration and rendering of the banner item
            into string output that can be embedded into any page as
            an expression.
            </summary>
        </member>
        <member name="M:Westwind.Web.Banners.BannerItem.New">
            <summary>
            Creates a new instance of BannerItem that has a new GUID set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerItem.UpdateImageSize">
            <summary>
            Updates the image size by loading the image from the
            Web
            </summary>
        </member>
        <member name="M:Westwind.Web.Banners.BannerItem.RenderLink">
            <summary>
            Get the clickable Image link for this control. If TrackClicks is true
            the output links to the HttpHandler which serves the image and track
            the clicks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerItem.RenderScriptInclude">
            <summary>
            Renders a script tag that calls on the HTTP Handler to load a block
            of script code that embeds the banner image into the page.
            
            This should be done to avoid hits by robots and other non-visual 
            clients from discovering the banner Url and hitting/clicking on
            the banner links.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerItem.RenderGroupScriptInclude(System.String)">
            <summary>
            The returned URL will retrieve a script include to pull the next
            banner from the specified group.
            </summary>
            <param name="bannerGroup">Group or null/"" for all</param>
            <returns>Script include string ready to embed into page</returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerItem.GetTrackedUrl">
            <summary>
            Returns the Url that will be used for tracking
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerItem.GetBasicTrackedUrl">
            <summary>
            Returns the URL that will be used for tracking but
            without a unique timestamp and referring url
            
            Use for UI display
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.BannerId">
            <summary>
            The unique ID for this Banner
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.ImageUrl">
            <summary>
            The URL where images are found
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.NavigateUrl">
            <summary>
            The explicit navigation Url that is used when
            the banner is clicked
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.Entered">
            <summary>
            The original time when this banner was enterd
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.Updated">
            <summary>
            The last time this banner was updated
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.SortOrder">
            <summary>
            An optional Sort order value - the higher will sort to the top of the
            list and be shown slightly more frequently.
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.Hits">
            <summary>
            The number of times the item was accessed. This
            counter is a total all time count.
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.ResetHits">
            <summary>
            A hit counter that can be reset to track specific time periods
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.Clicks">
            <summary>
            Total number of clicks on this banner if handled through
            the banner manager
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.ResetClicks">
            <summary>
            Number of clicks on this banner that is resettable for
            specific campaign tracking
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.MaxHits">
            <summary>
            Maximum number of ResetHits before this item
            stops being displayed.
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.Active">
            <summary>
            Determines whether this item is active
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.Width">
            <summary>
            The pixel width of the banner.
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.Height">
            <summary>
            The pixel height of the banner.
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerItem.BannerType">
            <summary>
            The type of banner to serve. Image, Swf, SilverLight etc.
            </summary>
        </member>
        <member name="T:Westwind.Web.Banners.BannerManager">
            <summary>
            This is the top level Banner management object that is called from
            a front end Web application.
            </summary>
        </member>
        <member name="F:Westwind.Web.Banners.BannerManager.Current">
            <summary>
            Global instance
            </summary>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.LoadBanners(System.String)">
            <summary>
            Loads all banners into the Banners collection
            </summary>
            <param name="Type"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.DeleteBanner(System.String)">
            <summary>
            Deletes an individual banner
            </summary>
            <param name="BannerId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.ClickBanner(System.String)">
            <summary>
            Updates the banner click count in the database
            </summary>
            <param name="BannerId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.BannerHit(System.String)">
            <summary>
            Increments the hit counter on a banner
            </summary>
            <param name="BannerId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.GetBanner(System.String)">
            <summary>
            Returns a specific banner item by its id
            </summary>
            <param name="BannerId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.GetNextBanner(System.String)">
            <summary>
            Returns a random banner
            </summary>
            <param name="Group"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderBanner(Westwind.Web.Banners.BannerItem)">
            <summary>
            Renders a given banner as a HTML
            </summary>
            <param name="banner"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderBanner(Westwind.Web.Banners.BannerItem,System.Boolean)">
            <summary>
            Renders a given banner as a HTML
            </summary>
            <param name="banner"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderBanner(System.String)">
            <summary>
            Renders a given banner as a script include
            </summary>
            <param name="BannerId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderBannerLink(Westwind.Web.Banners.BannerItem)">
            <summary>
            Renders a given banner as a HTML
            </summary>
            <param name="banner"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderBannerLink(System.String)">
            <summary>
            Renders a given banner as a script include
            </summary>
            <param name="BannerId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderNextBanner(System.String)">
            <summary>
            Retrieves the next banner for the group and renders the banner as a 
            script include into the page.
            
            This link is created as a script link so that robots will not Click
            or follow this banner's link.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderNextBanner">
            <summary>
            Retrieves the next banner for the group and renders the banner as a 
            script include into the page.
            
            This link is created as a script link so that robots will not Click
            or follow this banner's link.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderNextBannerLink(System.String)">
            <summary>
            This is the primary rendering routine that retrieves the next Banner
            and renders it as a script include into the page.
            </summary>
            <param name="BannerGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.RenderNextBannerLink">
            <summary>
            This is the primary rendering routine that retrieves the next Banner
            and renders it as a script include into the page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.ReadBannerItem(System.Data.Common.DbDataReader)">
            <summary>
            Loads an individual Banner Entity from a DataReader
            </summary>
            <param name="Reader"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.UpdateBannerItem(Westwind.Web.Banners.BannerItem)">
            <summary>
            Updates an existing banner item.
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.GetNewBannerId">
            <summary>
            Creates a new Banner Id. Banner Ids are GUID Hashcodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.InsertBannerItem(Westwind.Web.Banners.BannerItem)">
            <summary>
            Inserts a new banner
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Banners.BannerManager.CreateTables(System.String)">
            <summary>
            Creates the Sql Server Tables
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Banners.BannerManager.Banners">
            <summary>
            Collection of Banners for this banner instance
            String value key is the banner id
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerManager.ConnectionString">
            <summary>
            The Connection string used to retrieve the banners
            </summary>                
        </member>
        <member name="P:Westwind.Web.Banners.BannerManager.BannerTable">
            <summary>
            The name of the table that contains the banners
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerManager.BannerClicksTable">
            <summary>
            Name of the table that holds banner clicks
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerManager.TrackBannerStatistics">
            <summary>
            Determines whether Hit counts and clicks are tracked. 
            Results in different links for the images
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerManager.ErrorMessage">
            <summary>
            An error message if an error occurs
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerManager.Data">
            <summary>
            Internal Data Access Layer - loaded on startup
            </summary>
        </member>
        <member name="T:Westwind.Web.Banners.BannerControl">
            <summary>
            Banner Control that embeds a 
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerControl.BannerGroup">
            <summary>
            The Banner group that is applied. Use blank for all banners
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerControl.Width">
            <summary>
            Width for the control (used only for placeholder rendering)
            </summary>
        </member>
        <member name="P:Westwind.Web.Banners.BannerControl.Height">
            <summary>
            Height of the banner (used only for placeholder rendering)
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwPage">
            <summary>
            This class provides a thin wrapper around the .Net Web Page class by providing
            simple interfaces for the databinding features. This includes BindData and UnbindData
            methods (as well as auto-hookup for DataBind), support for Validation Error Messages
            and methods to provide combination of Business object and Binding errors into a single
            collection which can be used for display.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.wwPage.OnPreRender(System.EventArgs)">
            <summary>
            Overriden to handle the FocusedControl property.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Westwind.Web.Controls.wwPage.FocusedControl">
            <summary>
            Assigns focus to the specified control. Note the name must match the exact
            ID or container Id of the control in question.
            Logic for this behavior is provided in OnPreRender()
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.wwCheckBoxList.OnInit(System.EventArgs)">
            <summary>
            Override to register ControlState
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.wwCheckBoxList.LoadControlState(System.Object)">
            <summary>
            Retrieve SelectedValue from ControlState
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Westwind.Web.Controls.wwCheckBoxList.SaveControlState">
            <summary>
            Save SelectedValue into Control State
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.wwCheckBoxList.GetSelectedValue">
            <summary>
            Retrieves the real selected value of the control. Used internally to read the 
            selected value OnInit as well as being available for reading the value from 
            the Forms collection more easily and storing it into the SelectedValue property.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwDropDownList">
            <summary>
            This control provides two way databinding, binding validation and limited formatting to the DropDownList control,
            but does this only for the controls' value member (simple databinding). List based binding still works
            as you would expect.
            
            Note that this control works without ViewState to assign values back. It does so after the OnLoad()
            event call on post backs by retrieving the previously posted value.
            </summary>
            	
        </member>
        <member name="M:Westwind.Web.Controls.wwDropDownList.OnInit(System.EventArgs)">
            <summary>
            Override to register ControlState
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.wwDropDownList.SaveControlState">
            <summary>
            Save SelectedValue into Control State
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.wwDropDownList.GetSelectedValue">
            <summary>
            Retrieves the real selected value of the control. Used internally to read the 
            selected value OnInit as well as being available for reading the value from 
            the Forms collection more easily and storing it into the SelectedValue property.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwListBox">
            <summary>
            This control provides two way databinding, binding validation and limited formatting to the Listbox control,
            but does this only for the controls' value member (simple databinding). List based binding still works
            as you would expect.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.wwListBox.OnInit(System.EventArgs)">
            <summary>
            Override to register ControlState
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.wwListBox.LoadControlState(System.Object)">
            <summary>
            Retrieve SelectedValue from ControlState
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Westwind.Web.Controls.wwListBox.SaveControlState">
            <summary>
            Save SelectedValue into Control State
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.wwListBox.GetSelectedValue">
            <summary>
            Retrieves the real selected value of the control. Used internally to read the 
            selected value OnInit as well as being available for reading the value from 
            the Forms collection more easily and storing it into the SelectedValue property.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwCheckBox">
            <summary>
            Checkbox override to allow for numeric checkbox value with 0 = false and everyting else denoting true
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.wwCheckBox.CheckedInt">
            <summary>
            Property that can be used to bind the checkbox to an
            integer value. Some database don't have bit or bool types
            and they can use this int field instead to bind to.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwWebForm">
            <summary>
            This class provides a thin wrapper around the .Net Web Page class by providing
            simple interfaces for the databinding features. This includes BindData and UnbindData
            methods (as well as auto-hookup for DataBind), support for Validation Error Messages
            and methods to provide combination of Business object and Binding errors into a single
            collection which can be used for display.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.wwWebForm.OnPreRender(System.EventArgs)">
            <summary>
            Overriden to handle the FocusedControl property.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Westwind.Web.Controls.wwWebForm.FocusedControl">
            <summary>
            Assigns focus to the specified control. Note the name must match the exact
            ID or container Id of the control in question.
            Logic for this behavior is provided in OnPreRender()
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwRadioButtonList">
            <summary>
            Summary description for wwTextBox.
            </summary>
            	
        </member>
        <member name="M:Westwind.Web.Controls.wwRadioButtonList.OnInit(System.EventArgs)">
            <summary>
            Override to register ControlState
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.wwRadioButtonList.LoadControlState(System.Object)">
            <summary>
            Retrieve SelectedValue from ControlState
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Westwind.Web.Controls.wwRadioButtonList.SaveControlState">
            <summary>
            Save SelectedValue into Control State
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.wwRadioButtonList.GetSelectedValue">
            <summary>
            Retrieves the real selected value of the control. Used internally to read the 
            selected value OnInit as well as being available for reading the value from 
            the Forms collection more easily and storing it into the SelectedValue property.
            </summary>
        </member>
        <member name="T:Westwind.Web.CallbackException">
            <summary>
            Special return type used to indicate that an exception was
            fired on the server. This object is JSON serialized and the
            client can check for Result.IsCallbackError to see if a 
            a failure occured on the server.
            </summary>    
        </member>
        <member name="T:Westwind.Web.CallbackMessage">
            <summary>
            Special return type that can be used to return messages to the
            </summary>    
        </member>
        <member name="T:Westwind.Web.CallbackHandlerRouteHandler">
            <summary>
            Route handler that can create instances of CallbackHandler derived
            callback classes. The route handler tracks the method name and
            creates an instance of the service in a predictable manner
            </summary>
            <typeparam name="TCallbackHandler">CallbackHandler type</typeparam>
        </member>
        <member name="M:Westwind.Web.CallbackHandlerRouteHandler.#ctor(System.String,System.Type)">
            <summary>
            Constructor to pass in the two required components we
            need to create an instance of our handler. 
            </summary>
            <param name="methodName"></param>
            <param name="callbackHandlerType"></param>
        </member>
        <member name="M:Westwind.Web.CallbackHandlerRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Retrieves an Http Handler based on the type specified in the constructor
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.CallbackHandlerRouteHandler.RegisterRoutes``1(System.Web.Routing.RouteCollection)">
            <summary>
            Generic method to register all routes from a CallbackHandler
            that have RouteUrls defined on the [CallbackMethod] attribute
            </summary>
            <typeparam name="TCallbackHandler"></typeparam>
            <param name="routes"></param>
        </member>
        <member name="P:Westwind.Web.CallbackHandlerRouteHandler.MethodName">
            <summary>
            Method name that is to be called on this route.
            Set by the automatically generated RegisterRoutes 
            invokatio.n
            </summary>
        </member>
        <member name="P:Westwind.Web.CallbackHandlerRouteHandler.CallbackHandlerType">
            <summary>
            The type of the handler we're going to instantiate.
            Needed so we can semi-generically instantiate the
            handler and call the method on it.
            </summary>
        </member>
        <member name="T:Westwind.Web.CallbackMethodAttribute">
            <summary>
            Marker Attribute to be used on Callback methods. Signals
            parser that the method is allowed to be executed remotely
            </summary>
        </member>
        <member name="M:Westwind.Web.CallbackMethodAttribute.#ctor">
            <summary>
            Default Constructor for CallbackMethodAttribute. No functionality added
            </summary>
        </member>
        <member name="P:Westwind.Web.CallbackMethodAttribute.RouteUrl">
            <summary>
            Allows specification of an ASP.NET style route URL to
            a Service Method.        
            
            Parameterized route fragments ( {parameter} ) should match
            parameter names. 
            <example>        
            products/{id}
            products/add
            products/add/{sku}
            service/helloworld/{name}/{company}
            </example>
            <remarks>
            Applies only to CallbackHandler based handlers. 
            Doesn't have any effect on Page methods called with AjaxMethodCallback
            
            Routes need to *uniquely* identify a method in a CallbackHandler.
            Make sure you don't have the same route or same partially parameterized
            route pointing at multiple methods - in which case you may end up with
            routing mismatches. 
            stocks/{symbol}
            stocks/{symbollist}
            </remarks>
            </summary>        
        </member>
        <member name="P:Westwind.Web.CallbackMethodAttribute.ContentType">
            <summary>
            Content Type used for results that are returned as Stream
            or raw string values. Same as setting Response.ContentType
            but more clear in the attribute
            </summary>
        </member>
        <member name="P:Westwind.Web.CallbackMethodAttribute.AllowedHttpVerbs">
            <summary>
            Allows specifying of the HTTP Verb that is accepted for the called method.
            
            The default is HttpVerbs.All.
            
            <remarks>
            Requests that fail to access the endpoint with the right HTTP Verb will not
            get called and return a 405 error along with an error object (JSON/XML) that 
            details the error in the body.
            </remarks>
            <seealso>Class CallbackMethodAttribute</seealso>
            </summary>
            <example>
            &lt;&lt;code lang=&quot;C#&quot;&gt;&gt;// Allow both GET and POST 
            operations
            [CallbackMethod(AllowedHttpVerbs=HttpVerbs.GET | HttpVerbs.POST),
                            RouteUrl=&quot;stocks/{symbol}&quot;]
            public StockQuote GetStockQuote(string symbol)
            { ... }&lt;&lt;/code&gt;&gt;
            </example>
        </member>
        <member name="P:Westwind.Web.CallbackMethodAttribute.ReturnAsRawString">
            <summary>
            When set to true indicates that a string result returned to the
            client should not be encoded in anw way. This can be more efficient for 
            large string results passed back to the client when returning
            HTML or other plain text and avoids extra encoding and decoding.
            
            The client can also specify format=string on the querystring to
            return string values as raw strings.
            </summary>
        </member>
        <member name="T:Westwind.Web.CallbackMethodProcessorHelper">
            <summary>
            This class provides helper services to the CallbackProcessor classes with 
            the generic services that deal with method execution and parsing POST 
            parameters which should be independent of the specific implementation 
            (JSON, XML etc.).
            
            Extracted here so other Callback Processors can be created more easily 
            later on, using other request formats (Xml etc.)
            </summary>
        </member>
        <member name="M:Westwind.Web.CallbackMethodProcessorHelper.ExecuteMethod(System.String,System.Object,System.String[],Westwind.Web.CallbackMethodParameterType,Westwind.Web.CallbackMethodAttribute@)">
            <summary>
            Executes the requested method. 
            to the proper types for execution.
            </summary>
            <param name="Method"></param>
            <param name="methodParameters">An array of the string json parameters to </param>
            <param name="target">The object to call the method on</param>
            <param name="parameters">An array of json Strings that make up the parameters for the method call. This value can be null in which case parms are parsed out of GET QueryString or POST values</param>
            <param name="callbackMethodAttribute">An optional instance of an CallbackAttribute that is set by this method</param>
            <returns>the result of the method execution</returns>
        </member>
        <member name="T:Westwind.Web.ICallbackMethodProcessor">
            <summary>
            Inteface that defines the Callback operations for handling method callbacks
            on the server.
            
            This interface serves as an abstraction for potentially different implementations
            that use XML instead of JSON.
            </summary>
        </member>
        <member name="M:Westwind.Web.ICallbackMethodProcessor.ProcessCallbackMethodCall(System.Object)">
            <summary>
            Generic method that handles processing a Callback request by routing to
            a method in a provided target object.
            
            </summary>
            <param name="target">The target object that is to be called. If null this is used</param>
        </member>
        <member name="M:Westwind.Web.ICallbackMethodProcessor.WriteErrorResponse(System.String,System.String)">
            <summary>
            Returns an error response to the client from a callback. Code
            should exit after this call.
            </summary>
            <param name="ErrorMessage"></param>
        </member>
        <member name="T:Westwind.Web.XmlCallbackMethodProcessor">
            <summary>
            This is the core implementation of the JSON callback method handler that 
            picks up POST data from the request and uses it to call the actual callback
             method on the specified object and return the results back as JSON.
            
            This processor is generic and can be used easily from anywhere that needs 
            to feed back JSON data from a method callback, simply calling the 
            ProcessCallbackMethod() with an object that contains methods that are 
            marked up with the [CallbackMethod] attribute.
            
            For example, wwCallbackHandler simply forwards all processing like this:
            
            &lt;&lt;code lang="C#"&gt;&gt;public void ProcessRequest(HttpContext 
            context)
            {
                // Pass off to the worker Callback Processor
                ICallbackMethodProcessor processor = new JsonCallbackMethodProcessor();
            
                // Process the inbound request and execute it on this
                // Http Handler's methods
                processor.ProcessCallbackMethodCall(this);
            }&lt;&lt;/code&gt;&gt;
            
            This processor is expected to execute in an environment where 
            HttpContext.Current is available and where POST data is available to 
            describe the incoming parameter data and method to call.
            </summary>
        </member>
        <member name="M:Westwind.Web.XmlCallbackMethodProcessor.ProcessCallbackMethodCall(System.Object,System.String)">
            <summary>
            Generic method that handles processing a Callback request by routing to
            a method in a provided target object.
            
            </summary>
            <param name="target">The target object that is to be called. If null this is used</param>
        </member>
        <member name="M:Westwind.Web.XmlCallbackMethodProcessor.HandleSpecialReturnTypes(System.Object,Westwind.Web.CallbackMethodAttribute,System.Web.HttpRequest,System.Web.HttpResponse)">
            <summary>
            This method handles special return types from callback methods
            by examining the return type or the ResultFormat query string.
            
            Checks are performed for:
            Stream, Bitmap, byte[] and raw string output
            </summary>
            <param name="Result"></param>
            <param name="callbackAttribute"></param>
            <param name="Request"></param>
            <param name="Response"></param>
        </member>
        <member name="M:Westwind.Web.XmlCallbackMethodProcessor.ProcessCallbackMethodCall(System.Object)">
            <summary>
            Generic method that handles processing a Callback request by routing to
            a method in a provided target object.
            
            This version doesn't pass in the method name but retrieves it from the
            POST data or query string.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Westwind.Web.XmlCallbackMethodProcessor.WriteErrorResponse(System.String,System.String)">
            <summary>
            Returns an error response to the client from a callback. Code
            should exit after this call.
            </summary>
            <param name="ErrorMessage"></param>
        </member>
        <member name="P:Westwind.Web.XmlCallbackMethodProcessor.JsonDateEncoding">
            <summary>
            Implemented only for compatibility
            </summary>
        </member>
        <member name="T:Westwind.Web.FormVariableBinder">
            <summary>
            The class that provides FormVariable to Model binding by matching
            FormVariable names to the model's properties including child
            properties. You can specify a 
            
            The base behavior is similar to ASP.NET MVC's ModelBinder's
            binding operation minus the validation features.
            </summary>
            <remarks>
            Note on Child Property Separators:
            WebForms doesn't support '.' characters in ID= values so
            you will need to specify a FormVarPropertySeparator. A good
            value to use is '__' (two underscores) to allow for underscores
            in actual properties. If you know your properties don't have underscores
            then a single '_' will also work. The separator is converted to . when
            parsing for child property names.
            </remarks>
        </member>
        <member name="M:Westwind.Web.FormVariableBinder.#ctor(System.Object,System.String)">
            <summary>        
            </summary>
            <param name="model">The object to unbind to</param>
            <param name="exceptions">Comma seperated list of properties to exclude</param>
        </member>
        <member name="M:Westwind.Web.FormVariableBinder.Unbind">
            <summary>
            Unbinds form variables into the specified target object 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.FormVariableBinder.Unbind(System.Object,System.String,System.String)">
            <summary>
            Unbinds form variable data into a model object.
            </summary>
            <param name="model">Object to unbind to</param>
            <param name="propertyExceptions">Properties to skip</param>
            <param name="formvarPrefixes">Form Variable prefixes to include. Prefix is stripped. (txtName maps to Name)</param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.FormVariableBinder.Model">
            <summary>
            An object to bind to
            </summary>
        </member>
        <member name="P:Westwind.Web.FormVariableBinder.FormVarPropertySeparator">
            <summary>
            The character used as a separator in the HTML form for child properties
            (ie. Address.Street or Address.Phone.Home)
            Default value is a .
            </summary>
        </member>
        <member name="P:Westwind.Web.FormVariableBinder.Prefixes">
            <summary>
            An optional prefix on form variables to unbind. 
            Can also specify multiple prefixes separated by commas.
            </summary>
        </member>
        <member name="P:Westwind.Web.FormVariableBinder.PropertyExceptionList">
            <summary>
            List of exceptions that aren't to be bound. Uses the Form variable name.
            </summary>
        </member>
        <member name="P:Westwind.Web.FormVariableBinder.BindingErrors">
            <summary>
            Binding Errors that occur on unbining into the model
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.Pager">
            <summary>
            The Pager class provides a standalone pager that can be added
            on any page and doesn't require a DataSource or related control. The
            control can be manually assigned values to display or automatically
            infer values using one of the FilterXXX methods to filter a data source.
            
            &lt;&lt;img src="images/pager1.png" /&gt;&gt;
            <seealso>Using the Pager Web Control to Page Content and Data Results</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.Pager._startPage">
            <summary>
            Internally used to hold the first page to render when max pages is exceeded
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.Pager._endPage">
            <summary>
            Internally used to hold the last page to render when max pages are exceeded
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            overridden to handle custom pager rendering for runtime and design time
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.ConfigurePagesToRender">
            <summary>
            Determines the startpage and endpage which are the first
            and last page numbers that are rendered.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.FixupBaseUrl">
            <summary>
            Tries to retrieve the Page url if one wasn't provided
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.OnInit(System.EventArgs)">
            <summary>
            Updates the internal settings based on the url
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.Pager.FilterIQueryable``1(System.Linq.IQueryable{``0},System.Int32)" -->
        <member name="M:Westwind.Web.Controls.Pager.FilterIQueryable``1(System.Linq.IQueryable{``0})">
            <summary>
            Queries the database for the ActivePage applied manually
            or from the Request["page"] variable. This routine
            figures out and sets TotalPages, ActivePage and
            returns a filtered subset IQueryable that contains
            only the items from the ActivePage.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.FilterIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="activePage"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.FilterDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Filters a data table for an ActivePage.
            
            Note: Modifies the data set permanently by remove DataRows
            </summary>
            <param name="dt">Full result DataTable</param>
            <param name="activePage">Page to display. 0 to use ActivePage property </param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.Pager.CalculateTotalPagesFromTotalItems">
            <summary>
            Calculates total pages from TotalItems
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.TotalPages">
            <summary>
            Total number of pages for this pager
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ActivePage">
            <summary>
            The page to display. Values are 1 based.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PageSize">
            <summary>
            The number of items on the page
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.TotalItems">
            <summary>
            Total number of items available - must be set manually or via one of the filter methods
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.BaseUrl">
            <summary>
            The base Url for each of the paging links.
            If left blank the control will use the current
            page Url and append.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.QueryStringPageField">
            <summary>
            Query string key name for the Page variable
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.CssClass">
            <summary>
            The CSS class used for the immediate pager control. By default this
            is rendered as a div tag. Default styling floats it right. 
            
            Use RenderPagerContainerDiv and PagerContainerCssClass to specify an 
            'outer' container if desired.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PageLinkCssClass">
            <summary>
            CSS Class used for page links
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.SelectedPageCssClass">
            <summary>
            CSS class used for the selected page
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PagesText">
            <summary>
            Pages: text string
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PagesTextCssClass">
            <summary>
            Pages: text
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.PreviousText">
            <summary>
            The text displayed for the previous button. If this
            text is empty the button is not displayed.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.NextText">
            <summary>
            The text displayed for the next button. If empty
            this button isn't displayed.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.MaxPagesToDisplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ShowFirstAndLastPageLinks">
            <summary>
            Determines whether the 1... and ...n page links are shown
            before and after the displayed pages
            
            Only shown if there are more pages than MaxPagesToDisplay
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ShowPreviousNextLinks">
            <summary>
            Determines whether the Previous and Next buttons are displayed
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.RenderContainerDiv">
            <summary>
            Determines whether a container div tag is generated. 
            Useful to allow nothing to be rendered if there are less than 2 pages
            as it hides the container. Alternately you can render the container
            through your markup but in that case you may end up with an empty container
            if there's no data or only a single page.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.RenderContainerDivBreak">
            <summary>
            Determines whether a br clear='all' is rendered inside of the container div to break content.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Pager.ContainerDivCssClass">
            <summary>
            The CSS Class used for the container div
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.PreservePropertyControl">
            <summary>
            Control used to automatically preserve properties on a page.
            By calling PreserveProperty you're instructing this control
            to persist and then restore the value of the specified property
            or field of a control and have it automatically restored on the
            next page access.
            
            The difference of this mechanism is that it works with ViewState
            off, and automatically reassigns persisted values back to the 
            controls they belong to without any extra code. It greatly 
            simplifies persisting values like IDs or some ViewState based
            values without having to use Viewstate on a page.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.AddParsedSubObject(System.Object)">
            <summary>
            Required to be able to properly PreservedProperty Collection 
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Westwind.Web.Controls.PreservePropertyControl.SerialzedProperties">
            <summary>
            Internal persistance object used to serialize
            into the state store. Hashtable is Serializable
            and can be serialized by the LosFormatter
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.PreservePropertyControl.PreservePropertyKey">
            <summary>
            Cache key value used
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.PreserveProperty(System.Web.UI.Control,System.String)">
            <summary>
            Adds a control to the collection. At this point only the
            control and property are stored.
            </summary>
            <param name="WebControl"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.PreserveProperty(System.String,System.String)">
            <summary>
            Adds a control to the collection. At this point only the
            control and property are stored.
            </summary>
            <param name="ControlId"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.OnInit(System.EventArgs)">
            <summary>
            Read in data of preserved properties in OnInit
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.OnPreRender(System.EventArgs)">
            <summary>
            Write out data for preserved properties in OnPreRender
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.SaveControlState">
            <summary>
            Saves the preserved Properties into a Hashtabe where the key is
            a string containing the ControlID and Property name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.LoadControlState(System.Object)">
            <summary>
            Overridden to store a HashTable of preserved properties.
            Key: CtlID + "|" + Property
            Value: Value of the control
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.SaveStateToLosStorage">
            <summary>
            Saves state the specified storage mechanism by
            first serializing to a string with the LosFormatter
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.PreservePropertyControl.LoadStateFromLosStorage">
            <summary>
            Retrieves the serialized data from the Storage medium
            as string using LosFormatter formatting.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservePropertyControl.PreservedProperties">
            <summary>
            Collection of all the preserved properties that are to
            be preserved/restored. Collection hold, ControlId, Property
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservePropertyControl.StorageMode">
            <summary>
            Determines the storage mode for the control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservePropertyControl.Enabled">
            <summary>
            Determines whether the control preserves and restores values
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.PreservedProperty">
            <summary>
            An individual Preserved Property. Contains
            a ControlId and Property name and optional (on preserve)
            an instance of a control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservedProperty.ControlId">
            <summary>
            The id for the control to preserve properties on
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservedProperty.Property">
            <summary>
            Property that the value is stored for
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.PreservedProperty.ControlInstance">
            <summary>
            An optional instance of the control that can be assigned
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.PropertyStorageModes">
            <summary>
            Determines how preserved properties are stored on the page
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.Captcha">
            <summary>
            A Captcha control that uses simple math expressions for validation
            before accepting input. 
            
            This control is fully self contained and carries the expected 'result'
            with it in ControlState data, so unlike image captcha there's no separate
            handler involved.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.Captcha.GenerateExpression">
            <summary>
            Method can be used to generate a new Expression object
            with new values to use. Use this method to update the
            wwCaptcha expression after you've saved an entry.        
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.Validated">
            <summary>
            Set during validation
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.ErrorMessage">
            <summary>
            The error message that is displayed when the not validated
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.DisplayMessage">
            <summary>
            The message that is displayed above the expression that is to be entered.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.Timeout">
            <summary>
            The timeout for this message in minutes.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Captcha.UniquePageId">
            <summary>
            An optional page identifier that has to be matched by
            the validation and is written into ViewState. Ensures
            that spammers can't just capture the full post buffer
            and repost to another page.
            
            This can be any unique value that the page uses like
            an ID or other page specific value that makes the
            particular request unique.
            
            Highly recommended you set this.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ErrorDisplay">
            <summary>
            The ErrorDisplay control provides a simple mechanism for displaying error
             and status messages in an easy to use, attractive and reusable control.
            
            The class includes several ways to do display data (ShowError, ShowMessage)
             as well as direct assignment to the .Text property which allows direct 
            display of content.
            
            Assigning to .Text and with a UserMessage set:
            &lt;&lt;img  src="images\wwErrorMsg.png"&gt;&gt;
            
            ShowMessage:
            &lt;&lt;img  src="images\wwErrorMsg_Msg.png"&gt;&gt;
            
            ShowError:
            &lt;&lt;img  src="images\wwErrorMsg_Error.png"&gt;&gt;
            
            ShowError and ShowMessage are plain display mechanisms that show only the  
            essage specified along with an icon to the left of the message. You can 
            also assign the Text property directly which assign the message body text. 
             The UserMessage displays at the top of the control is configurable. You 
            can also have the control timeout and 'fade out' after a few seconds of  
            dplaying the message text.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the container
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.ShowError(System.String)">
            <summary>
            Assigns an error message to the control
            <seealso>Class ErrorDisplay</seealso>
            </summary>
            <param name="Text">
            The main message text that is displayed.
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.ShowError(System.String,System.String)">
            <summary>
            Assigns an error message to the control as well as a UserMessage
            <seealso>Class ErrorDisplay</seealso>
            </summary>
            <param name="text">
            The main message text that is displayed.
            </param>
            <param name="Message">
            Optional Message header shown above the message text.
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.ErrorDisplay.ShowMessage(System.String)">
            <summary>
            Displays a simple message in the display area along with the info icon 
            before it.
            <seealso>Class ErrorDisplay</seealso>
            </summary>
            <param name="Message">
            The message to display.
            </param>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.Text">
            <summary>
            The detail text of the error message
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.UserMessage">
            <summary>
            The message to display above the error message.
            For example: Please correct the following:
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.ErrorImage">
            <summary>
            Image URL to a warning icon displayed with the error message. Defaults to WarningResource which loads an image resource from the assembly. 
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.InfoImage">
            <summary>
            An image Url that is displayed with the ShowMessage method. Defaults to 
            InfoResource which loads an icon from the control assembly.
            <seealso>Class ErrorDisplay</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.Center">
            <summary>
            Determines whether the display box is centered
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.UseFixedHeightWhenHiding">
            <summary>
            Determines whether the control keeps its space padding
            when it is is hidden in order not to jump the display.
            Controls the visibility style attribute.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.RenderMode">
            <summary>
            Determines how the error dialog renders
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.Width">
            <summary>
            The width of the ErrorDisplayBox
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.CellPadding">
            <summary>
            Determines the padding inside of the error display box.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.CssClass">
            <summary>
            The CSS Class used for the table and column to display this item.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.ErrorDisplay.DisplayTimeout">
            <summary>
            A timeout in milliseconds for how long the error display is visible. 0 means no timeout.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.RenderModes.Text">
            <summary>
            Error Text is Text and needs fixing up
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.RenderModes.Html">
            <summary>
            The text is HTML and ready to display
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.RenderModes.TextAsBulletList">
            <summary>
            Text is plain text and should be rendered as a bullet list
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.HelpControl">
            <summary>
            This class presents a Help Link on a page. Specify a linkname in the 
            HelpTopic property. Usually this is the name of a page.
            
            Note: Can only be dropped on a wwWebForm derived Page class as it
            depends on methods in this class to figure out base URLs.
            
            Note: The image does not display in design mode.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControl.HelpBaseUrl">
            <summary>
            The base Help Url that is used as a base for Help Topics.
            
            You should set this value in your application's startup code (Application_Start 
            or static constructor of a class). Any HelpTopic Ids used are appended
            to this base path. Note that this also works with dynamic URLs that
            use a querystring as long as the Topic id is the last thing and can
            simply be appended to the URL.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.HelpControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to render the help control text. Calls back to the
            wwWebForm.GetHelpHyperLink() to do all the work.
            
            Note: Requires the wwWebForm base class. Throws an exception otherwise
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Web.Controls.HelpControl.FormatHelpUrl(System.String)">
            <summary>
            Method used to format a Help Url into a fully qualified help Url.
            
            This method should be overridden in an application specific method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.HelpControl.GetHelpHyperLink(System.String,System.String,System.String,System.String,System.String)" -->
        <member name="P:Westwind.Web.Controls.HelpControl.HelpTopic">
            <summary>
            The Help Topic to display. This should be just the help detail - usually
            the filename only (ie. _SomePage.htm) in your help base path.
            
            If this value is blank it inherits the page's HelpTopic. If both are
            blank this help link is not displayed.
            
            Note: Make sure you set the static <see cref="!:wwWebForm.HelpBaseUrl">wwWebForm.HelpBaseUrl</see>&gt; property in your application
            startup so the proper help base path is used.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.Text">
            <summary>
            The text of the label. Leave blank to show only the image
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.AltText">
            <summary>
            The alternate text for the image displayed when the mouse hovers over the image.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.HelpControlType">
            <summary>
            Determines whether this control handles a help link and/or F1 key operation
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.HelpControl.HelpImage">
            <summary>
            The image used for the help icon. Defaults to ~/images/help.gif
            <seealso>Class wwHelpControl                                         </seealso>
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.HelpControlTypes">
            <summary>
            Determines whether link is treated as a link or as a page F1 handler.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControlTypes.HelpLink">
            <summary>
            A Help link is displayed
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControlTypes.F1Handler">
            <summary>
            This control only tries to handle page F1 access
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.HelpControlTypes.HelpLinkAndF1Handler">
            <summary>
            This control should display both a help link
            and handle the F1 key
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.MessageDisplayBase">
            <summary>
            This class is used to display messages with a single command via the 
            DisplayMessage() method. This class also has the ability to automatically 
            redirect to another page which allows moving to new pages and still be able
             to set Cookies if required.
            
            This class is abstract and requires an application specific subclass - 
            generally MessageDisplay.aspx that must follow a few simple but 
            <see>Creating a custom MessageDisplay page</see>.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.MessageDisplayBase.Pagename">
            <summary>
            Static member that determines the name of the MessageDisplay page.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayPage(System.Web.UI.WebControls.Label,System.Web.UI.WebControls.Label,System.Web.UI.WebControls.Label)">
            <summary>
            Displays the page with the appropriate controls filled in.
            </summary>
            <remarks>Assumes that lblHeader, lblMessage, lblRedirectHyperLink are defined.</remarks>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayPage">
            <summary>
            Displays the page by setting the lblHeader, lblMessage and lblRedirectHyperLink controls
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayMessage(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Generates a self-contained error message display page that issues a 
            Server.Transfer to the MessageDisplay.aspx page in your application root.
            <seealso>Class wwMessageDisplay</seealso>
            </summary>
            <param name="Header">
            Header message and title of the page
            </param>
            <param name="Message">
            The body of the message - this is HTML
            </param>
            <param name="RedirectUrl">
            Url to redirect to
            </param>
            <param name="Timeout">
            Timeout for the page before redirecting
            </param>
            <returns>Void</returns>
            <example>
            MessageDisplay.DisplayMessage("Clearing Profile",
            	"We're clearing out your profile to log you out of the "+
            	App.Configuration.StoreName + " for this computer.",
            	"/default.aspx",4);
            </example>
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayMessage(System.String,System.String,System.String,System.Int32)">
            <summary>
            Generates a self-contained error message display page that issues a 
            Server.Transfer to the MessageDisplay.aspx page in your application root.
            <seealso>Class wwMessageDisplay</seealso>
            </summary>
            <param name="Header">
            Header message and title of the page
            </param>
            <param name="Message">
            The body of the message - this is HTML
            </param>
            <param name="RedirectUrl">
            Url to redirect to
            </param>
            <param name="Timeout">
            Timeout for the page before redirecting
            </param>
            <returns>Void</returns>
            <example>
            MessageDisplay.DisplayMessage("Clearing Profile",
            	"We're clearing out your profile to log you out of the "+
            	App.Configuration.StoreName + " for this computer.",
            	"/default.aspx",4);
            </example>		
        </member>
        <member name="M:Westwind.Web.Controls.MessageDisplayBase.DisplayMessage(System.String,System.String)">
            <summary>
            Generates a self-contained error message display page that issues a 
            Server.Transfer to the MessageDisplay.aspx page in your application root.
            <seealso>Class wwMessageDisplay</seealso>
            </summary>
            <param name="Header">
            Header message and title of the page
            </param>
            <param name="Message">
            The body of the message - this is HTML
            </param>
            <returns>Void</returns>
            <example>
            MessageDisplay.DisplayMessage("Clearing Profile",
            	"We're clearing out your profile to log you out of the "+
            	App.Configuration.StoreName + " for this computer.",
            	"/default.aspx",4);
            </example>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.MessageHeader">
            <summary>
            The Header to be displayed on the page. Used only in the 'display' code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.Message">
            <summary>
            The message to be displayed on the page. This text may be in HTML format. Used only in the display code.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.RedirectUrl">
            <summary>
            The Url to redirect to. Optional. Used only in the display code
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.StyleSheet">
            <summary>
            A stylesheet reference that gets embedded into the page if set.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.MessageDisplayBase.BasePath">
            <summary>
            This property is set during the loading of the page and can be used
            inside of the page to allow relative links to be found.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.TabControl">
            <summary>
            The TabControl provides a simple client control tab interface  to display 
            multiple pages with a tabbed interface at the top. Content pages are simply
             created as plain &lt;div&gt; tags with an ID that is referenced via the 
            TabPageClientId property. A default tab can be chosen which is displayed 
            initially and the control keeps track of the tabpage active across 
            apostbacks.
            
            &lt;&lt;img src="images/TabControl.png"&gt;&gt;
            
            The tab control only fires on the client and there are no server side 
            events fired. You can assign the SelectedTab property but otherwise the 
            server side has no additional control. Client side code can activate the 
            tab with a JavaScript ActivateTab(tabId, num) which specifies the ClientID 
            of the tab control and the tab by number or client ID of the Div.
            </summary>
            <example>
            &lt;&lt;code lang=&quot;HTML&quot;&gt;&gt;
            &lt;div class=&quot;containercontent&quot;&gt;
            
                &lt;ww:TabControl runat=&quot;server&quot; ID=&quot;TabControls&quot; 
            TabHeight=&quot;25&quot; TabWidth=&quot;120&quot;
                    TabstripSeparatorHeight=&quot;&quot; &gt;
                    &lt;TabPages&gt;
                        &lt;ww:TabPage runat=&quot;server&quot; ID=&quot;Page1&quot; 
            TabPageClientId=&quot;Page1&quot; Caption=&quot;Page 1&quot;
                            
            Style=&quot;height:25px;width:120px;height:25px;width:120px;&quot; /&gt;
                        &lt;ww:TabPage runat=&quot;server&quot; ID=&quot;Page2&quot; 
            TabPageClientId=&quot;Page2&quot; Caption=&quot;Page 2&quot;
                            
            Style=&quot;height:25px;width:120px;height:25px;width:120px;&quot; /&gt;
                        &lt;ww:TabPage runat=&quot;server&quot; ID=&quot;Page3&quot; 
            TabPageClientId=&quot;Page3&quot; Caption=&quot;Page 3&quot;
                            
            Style=&quot;height:25px;width:120px;height:25px;width:120px;&quot;/&gt;
            
                    &lt;/TabPages&gt;
                &lt;/ww:TabControl&gt;
            
                &lt;div id=&quot;Page1&quot; class=&quot;tabpage&quot;&gt;
                    Page 1
                &lt;/div&gt;
                &lt;div id=&quot;Page2&quot; class=&quot;tabpage&quot;&gt;
                    Page 2
                &lt;/div&gt;
                &lt;div id=&quot;Page3&quot; class=&quot;tabpage&quot;&gt;
                    Page 3
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;&lt;/code&gt;&gt;
            </example>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.Output">
            <summary>
            The completed control output
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.TabOutput">
            <summary>
            The output for the tabs generated by RenderTabs
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.Script">
            <summary>
            The output of the Script block required to handle tab activation
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.ClientScriptProxy">
            <summary>
            Makes MS Ajax aware
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.RenderControl">
            <summary>
            High level routine that renders the actual control
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.RenderTabs">
            <summary>
            Creates various string properties that are merged into the output template.
            Creates the tabs and the associated script code.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.AddTab(System.String,System.String,System.String)">
            <summary>
            Adds a new item to the Tab collection.
            </summary>
            <param name="Caption">The caption of the tab</param>
            <param name="Link">The HTTP or JavaScript link that is fired when the tab is activated. Can optionally be Default which activates the tab and activates the page ID.</param>
            <param name="TabPageClientId">The ID for this tab - map this to an ID tag in the HTML form.</param>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.AddTab(System.String,System.String)">
            <summary>
            Adds a new item to the Tab collection.
            </summary>
            <param name="Caption">The caption of the tab</param>
            <param name="Link">The HTTP or JavaScript link that is fired when the tab is activated. Can optionally be Default which activates the tab and activates the page ID.</param>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.FixupActionLink(Westwind.Web.Controls.TabPage)">
            <summary>
            Fixes up the ActionLink property to final script code
            suitable for an onclick handler
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.TabControl.AddParsedSubObject(System.Object)">
            <summary>
            Required to be able to properly deal with the Collection object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Westwind.Web.Controls.TabControl.MasterTemplate">
            <summary>
            The master HTML template into which the dynamically generated tab display is rendered.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabPages">
            <summary>
            Collection of Tabpages.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.SelectedTab">
            <summary>
            The Selected Tab. Set this to the TabPageClientId of the tab that you want to have selected
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabWidth">
            <summary>
            The width for each of the tabs. Each tab will be this width.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabHeight">
            <summary>
            The height of each of the tabs.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabCssClass">
            <summary>
            The CSS class that is used to render nonselected tabs.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.SelectedTabCssClass">
            <summary>
            The CSS class that is used to render a selected button. Defaults to selectedtabbutton.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabControl.TabStripSeparatorCssClass">
            <summary>
            The class used for the separator strip between tab and content
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.TabPage">
            <summary>
            The individual TabPage class that holds the intermediary Tab page values
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabPage.TabImage">
            <summary>
            Image placed on the left of the Tab
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabPage.Style">
            <summary>
            Image placed on the left of the Tab
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.TabCollection.Add(Westwind.Web.Controls.TabPage)">
            <summary>
            Adds a new error to the collection
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.TabCollection.Item(System.Int32)">
            <summary>
            Indexer property for the collection that returns and sets an item
            </summary>
        </member>
        <member name="T:Westwind.Web.HttpResponseExtensions">
            <summary>
            HttpResponse Extension methods to facilitate various output tasks
            </summary>
        </member>
        <member name="M:Westwind.Web.HttpResponseExtensions.WriteLine(System.Web.HttpResponse,System.Object)">
            <summary>
            Writes output as an HTML 'line' by appending a &lt;br /&gt; and linefeed at the end
            </summary>
            <param name="response"></param>
            <param name="output">String to output</param>
        </member>
        <member name="M:Westwind.Web.HttpResponseExtensions.WriteLine(System.Web.HttpResponse,System.String,System.Object[])">
            <summary>
            Writes formatted output as an HTML 'line' by appending a &lt;br /&gt; and linefeed at the end
            </summary>
            <param name="response">HttpResponse object</param>
            <param name="format">format string</param>
            <param name="args">format string arguments</param>
        </member>
        <member name="M:Westwind.Web.HttpResponseExtensions.Write(System.Web.HttpResponse,System.String,System.Object[])">
            <summary>
            Writes formatted output into the Response
            </summary>
            <param name="response">HttpResponse object</param>
            <param name="format">format string</param>
            <param name="args">format string arguments</param>
        </member>
        <member name="T:Westwind.Web.Controls.BindingErrors">
            <summary>
            This class provides a holding container for BindingErrors. BindingErrors 
            occur during binding and unbinding of controls and any errors are stored in
             this collection. This class is used extensively for checking for 
            validation errors and then displaying them with the ToString() or ToHtml() 
            methods.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.BindingErrors.ToHtml">
            <summary>
            Formats all the BindingErrors into a rich list of error messages. The error
             messages are marked up with links to the appropriate controls. Format of 
            the list is a &lt;ul&gt; style list ready to display in an HTML page.
            <seealso>Class BindingErrors</seealso>
            </summary>
            <returns>an Html string of the errors</returns>
        </member>
        <member name="M:Westwind.Web.Controls.BindingErrors.ToString">
            <summary>
            Formats an Binding Errors collection as a string with carriage returns
            </summary>
            <param name="Errors"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.Controls.BindingError">
            <summary>
            Error object used to return error information during databinding.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.BindingError.ClientID">
            <summary>
            The ClientID of the control the error occurred on. This value is used to 
            provide the hot linking to the control.
            <seealso>Class BindingError</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.BindingError.Message">
            <summary>
            The error message that is displayed for the Binding error.
            <seealso>Class BindingError</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.BindingError.ErrorMessage">
            <summary>
            The raw Exception error message. Not used at the moment.
            <seealso>Class BindingError</seealso>
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.RequiredFieldException">
            <summary>
            Exception thrown when a required field is not filled in. Used internally
            for catching these errors and rendering the error.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.BindingErrorException">
            <summary>
            Exception thrown when a BindingError is encountered
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.ValidationErrorException">
            <summary>
            An exception fired if a validation error occurs in DataBinding
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.IDataBinder">
            <summary>
            Extender style interface that allows adding a DataBinder 
            object to a control and interact with a DataBinder object
            on a Page. 
            
            Any control marked with this interface can be automatically
            pulled into the a DataBinder instance with 
            DataBinder.LoadFromControls().
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBinder">
            <summary>
            The DataBinder class provides two-way, simple databinding a single
            datasource value and single control property. It can bind object properties
            and fields and database values (DataRow fields) to a control property such
            as the Text, Checked or SelectedValue properties. In a nutshell the
            controls acts as a connector between a datasource and the control and
            provides explicit databinding for the control.
            
            The control supports two-way binding. Control can be bound to the
            datasource values and can be unbound by taking control values and storing
            them back into the datasource. The process is performed explicitly by
            calling the DataBind() and Unbind() methods of the control. Controls
            attached to the databinder can also be bound individually.
            
            The control also provides a BindErrors collection which captures any
            binding errors and allows friendly display of these binding errors using
            the ToHtml() method. BindingErrors can be manually added and so application
            level errors can be handled the same way as binding errors. It's also
            possible to pull in ASP.NET Validator control errors.
            
            Simple validation is available with IsRequired for each DataBinding item.
            Additional validation can be performed server side by implementing the
            ValidateControl event which allows you to write application level
            validation code.
            
            This control is implemented as an Extender control that extends any Control
             based class. This means you can databind to ANY control class and its
            properties with this component.
            <seealso>Databinding with DataBinder</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBinder._AutoLoadedDataBoundControls">
            <summary>
            Flag that determines whether controls where auto-loaded from the page.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBinder.ClientScriptProxy">
            <summary>
            Make MS Ajax aware
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.DataBind">
            <summary>
            Performs data binding against each of the defined DataBindingItems defined 
            on the DataBinder control. This binds all BindingSources to the specified 
            control properties.
            
            Typically DataBind is called in the Page_Load() of the page cycle and only 
            when the page originally loads - ie. (if !Page.IsPostPack). Subsequent page
             hits post back values so you typically do not want to rebind values to 
            POST form variables on each hit.
            
            &lt;&lt;code lang="C#"&gt;&gt;
            Invoice.Load(id);   // load data to bind
            
            // bind only on first load or if the product is changed
            if (!IsPostBack || IsProductChange)
               DataBinder.DataBind();
            
            // Manually bind this control always - it's ReadOnly and so doesn't post 
            back
            DataBinder.GetDataBindingItem(txtPk).DataBind();
            &lt;&lt;/code&gt;&gt;
            
            Some controls - non-Postback, or read only controls for example - you will 
            want to rebind explicit each time so make sure those are bound explicitly 
            outside of the !IsPostBack block.
            <seealso>Class DataBinder</seealso>
            </summary>
            <returns>true if there no errors. False otherwise.</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.DataBind(System.Web.UI.Control)">
            <summary>
            Performs data binding against each of the defined DataBindingItems defined 
            on the DataBinder control. This binds all BindingSources to the specified 
            control properties.
            
            Typically DataBind is called in the Page_Load() of the page cycle and only 
            when the page originally loads - ie. (if !Page.IsPostPack). Subsequent page
             hits post back values so you typically do not want to rebind values to 
            POST form variables on each hit.
            
            &lt;&lt;code lang="C#"&gt;&gt;
            Invoice.Load(id);   // load data to bind
            
            // bind only on first load or if the product is changed
            if (!IsPostBack || IsProductChange)
               DataBinder.DataBind(this);
            
            // Manually bind this control always - it's ReadOnly and so doesn't post 
            back
            DataBinder.GetDataBindingItem(txtPk).DataBind();
            &lt;&lt;/code&gt;&gt;
            
            Some controls - non-Postback, or read only controls for example - you will 
            want to rebind explicit each time so make sure those are bound explicitly 
            outside of the !IsPostBack block.
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="Container">
            The top level container that is bound
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.Unbind">
            <summary>
            Unbinds value from controls back into their underlying binding sources for 
            the defined DataBinding items of this control. Returns true on success 
            false on failure.
            
            Unbinding handles unbinding and checking for unbinding errors for invalid 
            data values that can't be converted back into their underlying data source.
             On failure of .Unbind() the BindingErrors collection will be set. A 
            typical unbind operation occurs in  button click event or other 'save' 
            operation fired from the page:
            
            &lt;&lt;code lang="C#"&gt;&gt;
            protected void btnSave_Click(object sender, EventArgs e)
            {
                // unbind back into the underlying data source: Product.Entity for most
             fields
                DataBinder.Unbind();
            
                // check for binding errors and display if there's a problem
                if (DataBinder.BindingErrors.Count &gt; 0)
                {
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                // validate the business object - check product entity for rule 
            violations
                if (!Product.Validate())
                {
                    // Automatically add binding errors from bus object 
            ValidationErrors
                    // requires IList that has ControlID and Message properties
                    
            DataBinder.AddValidationErrorsToBindingErrors(Product.ValidationE
            rrors);
            
                    // You can also manually add binding error messages and assign to a
             control
                    //DataBinder.AddBindingError("Invalid Country 
            Code",txtCountry);
            
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                if (!Product.Save())
                {
                    ErrorDisplay.ShowError("Couldn't save Product:&lt;br/&gt;" + 
            Product.ErrorMessage);
                    return;
                }
            
                ErrorDisplay.ShowMessage("Product information has been saved.");
            }
            &lt;&lt;/code&gt;&gt;
            <seealso>Class DataBinder</seealso>
            </summary>
            <returns>True if there are no errors. False if unbinding failed and BindingErrors Collection set with errors.</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.Unbind(System.Web.UI.Control)">
            <summary>
            Unbinds value from controls back into their underlying binding sources for 
            the defined DataBinding items of this control. Returns true on success 
            false on failure.
            
            Unbinding handles unbinding and checking for unbinding errors for invalid 
            data values that can't be converted back into their underlying data source.
             On failure of .Unbind() the BindingErrors collection will be set. A 
            typical unbind operation occurs in  button click event or other 'save' 
            operation fired from the page:
            
            &lt;&lt;code lang="C#"&gt;&gt;
            protected void btnSave_Click(object sender, EventArgs e)
            {
                // unbind back into the underlying data source: Product.Entity for most
             fields
                DataBinder.Unbind();
            
                // check for binding errors and display if there's a problem
                if (DataBinder.BindingErrors.Count &gt; 0)
                {
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                // validate the business object - check product entity for rule 
            violations
                if (!Product.Validate())
                {
                    // Automatically add binding errors from bus object 
            ValidationErrors
                    // requires IList that has ControlID and Message properties
                    
            DataBinder.AddValidationErrorsToBindingErrors(Product.ValidationE
            rrors);
            
                    // You can also manually add binding error messages and assign to a
             control
                    //DataBinder.AddBindingError("Invalid Country 
            Code",txtCountry);
            
                    ErrorDisplay.Text = DataBinder.BindingErrors.ToHtml();
                    return;
                }
            
                if (!Product.Save())
                {
                    ErrorDisplay.ShowError("Couldn't save Product:&lt;br/&gt;" + 
            Product.ErrorMessage);
                    return;
                }
            
                ErrorDisplay.ShowMessage("Product information has been saved.");
            }
            &lt;&lt;/code&gt;&gt;
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="Container">
            The top level container Control that is bound.
            </param>
            <returns>True if there are no errors. False if unbinding failed. Check the BindingErrors for errors.</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.HandleUnbindingError(Westwind.Web.Controls.DataBindingItem,System.Exception)">
            <summary>
            Manages errors that occur during unbinding. Sets BindingErrors collection and
            and writes out validation error display to the page if specified
            </summary>
            <param name="Item"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBinding(System.Web.UI.Control,System.String,System.Object,System.String)">
            <summary>
            Adds a binding to the control. This method is a simple way to establish a 
            binding.
            
            Returns the Item so you can customize properties further
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="ControlToBind">
            An instance of the control to bind to
            </param>
            <param name="ControlPropertyToBind">
            Property on the control to bind to
            </param>
            <param name="SourceObjectToBindTo">
            An instance of the data item or object that is to be bound
            </param>
            <param name="SourceMemberToBindTo">
            The name of the property to bind on the data item or object
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBinding(System.Web.UI.Control,System.String,System.String,System.String)">
            <summary>
            Adds a binding to the control. This method is a simple way to establish a 
            binding.
            
            Returns the Item so you can customize properties further
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="ControlToBind">
            An instance of a control that is to be bound
            </param>
            <param name="ControlPropertyToBind">
            The property on the control to bind to
            </param>
            <param name="SourceObjectNameToBindTo">
            The name of a data item or object to bind to.
            </param>
            <param name="SourceMemberToBindTo">
            The name of the property on the object to bind to
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBinding(System.Web.UI.Control)">
            <summary>
            This method only adds a data binding item, but doesn't bind it to anything.
             This can be useful for only displaying errors
            <seealso>Class DataBinder</seealso>
            </summary>
            <param name="ControlToBind">
            An instance of the control to bind to
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBindingError(System.String,System.String)">
            <summary>
            Adds a binding error message to a specific control attached to this binder
            BindingErrors collection.
            </summary>
            <param name="ControlName">Form relative Name (ID) of the control to set the error on</param>
            <param name="ErrorMessage">The Error Message to set it to.</param>
            <returns>true if the control was found. False if not found, but message is still assigned</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBindingError(System.String,System.Web.UI.Control)">
            <summary>
            Adds a binding error to the collection of binding errors.
            </summary>
            <param name="ErrorMessage"></param>
            <param name="control"></param>
            <returns>false if the control was not able to get a control reference to attach hotlinks and an icon. Error message always gets added</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddBindingError(System.String,Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Adds a binding error for DataBindingItem control. This is the most efficient
            way to add a BindingError. The other overloads call into this method after
            looking up the Control in the DataBinder.
            </summary>
            <param name="ErrorMessage"></param>
            <param name="BindingItem"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.AddValidationErrorsToBindingErrors(System.Collections.IList)">
            <summary>
            Takes a collection of ValidationErrors and assigns it to the
            matching controls. The IList object should have Message and
            ControlID (optional) properties.
            
            These controls must match in signature as follows:
            Must have the same name as the field and a 3 letter prefix. For example,
            
            txtCompany - matches company field
            cmbCountry - matches the Country field
            
            The input parameter is a generic IList value, but the type should be
            specifically Westwind.BusinessObjects.ValidationErrorCollection. The
            generic parameter is used here to avoid an assembly dependence.
            </summary>        
            <param name="errors">List of objects that have at least ControlID and Message properties</param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.LoadFromControls(System.Web.UI.Control)">
            <summary>
            Picks up all controls on the form that implement the IDataBinder interface
            and adds them to the DataBindingItems Collection
            </summary>
            <param name="Container"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.LoadDataBoundControls(System.Web.UI.Control)">
            <summary>
            Loop through all of the contained controls of the form and
            check for all that implement IDataBinder. If found
            add the BindingItem to this Databinder
            </summary>
            <param name="Container"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.DeriveUserFieldName(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Returns a UserField name. Returns UserFieldname if set, or if not
            attempts to derive the name based on the field.
            </summary>
            <param name="Control"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.Controls.DataBinder.GetBindingErrorMessageHtml(Westwind.Web.Controls.DataBindingItem)" -->
        <member name="M:Westwind.Web.Controls.DataBinder.AddScriptForAddHtmlAfterControl">
            <summary>
            This method adds the static script to handle injecting the warning icon/messages 
            into the page as literal strings.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.OnValidateControl(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Fires the ValidateControlEvent
            </summary>
            <param name="Item"></param>
            <returns>false - Validation for control failed and a BindingError is added, true - Validation succeeded</returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.OnBeforeUnbindControl(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Fires the BeforeUnbindControl event
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.CanExtend(System.Object)">
            <summary>
            Determines whether a control can be extended. Basically
            we allow ANYTHING to be extended so all controls except
            the databinder itself are extendable.
            
            Optionally the control can be set up to not act as 
            an extender in which case the IsExtender property 
            can be set to false
            </summary>
            <param name="extendee"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.GetDataBindingItem(System.Web.UI.Control)">
            <summary>
            Returns a specific DataBinding Item for a given control.
            Always returns an item even if the Control is not found.
            If you need to check whether this is a valid item check
            the BindingSource property for being blank.
            
            Extender Property Get method
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.GetDataBindingItem(System.String)">
            <summary>
            Return a specific databinding item for a give control id.
            Note unlike the ControlInstance version return null if the
            ControlId isn't found. 
            </summary>
            <param name="ControlId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBinder.NotifyDesigner">
            <summary>
            this method is used to ensure that designer is notified
            every time there is a change in the sub-ordinate validators
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.DataBindingItems">
            <summary>
            A collection of all the DataBindingItems that are to be bound. Each 
            &lt;&lt;%= TopicLink([DataBindingItem],[_1UL03RIKQ]) %&gt;&gt; contains 
            the information needed to bind and unbind a DataSource to a Control 
            property.
            <seealso>Class DataBinder</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.BindingErrors">
            <summary>
            A collection of binding errors that is filled after binding or unbinding
            if errors occur during binding and unbinding.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.ShowBindingErrorsOnControls">
            <summary>
            Determines whether binding errors are display on controls.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.HideValidators">
            <summary>
            Hides the Validator display and uses only the DataBinder's display for errors
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.DefaultBindingSource">
            <summary>
            A default binding source that is used if the binding source 
            on an individual item is not set.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.ErrorIconUrl">
            <summary>
            Optional Url to the Warning and Info Icons.
            Note: Used only if the control uses images.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.UseClientScriptHtmlInjection">
            <summary>
            Determines whether the control uses client script to inject error 
            notification icons/messages into the page. Setting this flag to true causes
             JavaScript to be added to the page to create the messages. If false, the 
            DataBinder uses Controls.Add to add controls to the Page or other 
            Containers.
            
            JavaScript injection is preferrable as it works reliable under all 
            environments except when JavaScript is off. Controls.Add() can have 
            problems if &lt;% %&gt; &lt;%= %&gt; script is used in a container that has
             an error and needs to add a control.
            <seealso>Class DataBinder</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.ErrorIconWebResource">
            <summary>
            The Web Resource Url used to access retrieve the Error Icon.
            Used to minimize reloading this URL from the resource manager
            repeatedly.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.AutoLoadDataBoundControls">
            <summary>
            Automatically imports all controls on the form that implement the IDataBinder interface and adds them to the DataBinder
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.IsExtender">
            <summary>
            Determines whether this control works as an Extender object to other controls on the form.
            In some situations it might be useful to disable the extender functionality such
            as when all databinding is driven through code or when using the IDataBinder
            interface with custom designed controls that have their own DataBinder objects.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.IsRequiredErrorMessage">
            <summary>
            Message displayed when IsRequired is blank. 
            
            Format string where {0} is the derived field name or UserFieldName.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.UnBindingErrorMessage">
            <summary>
            Error displayed when an unbinding error occurs. Typically
            this will be some sort of format conversion problem
            {0} denotes the derived field name.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBinder.BindingErrorMessage">
            <summary>
            Binding Error message when a control fails to bind
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.ValidateControl">
            <summary>
            Event that can be hooked to validate each control after it's been unbound. 
            Allows for doing application level validation of the data once it's been 
            returned.
            
            This method receives a DataBindingItem parameter which includes a 
            reference to both the control and the DataSource object where you can check
             values. Return false from the event method to indicate that validation 
            failed which causes a new BindingError to be created and added to the 
            BindingErrors collection.
            <seealso>Class DataBinder</seealso>
            </summary>
            <example>
            &lt;&lt;code lang=&quot;C#&quot;&gt;&gt;protected bool 
            DataBinder_ValidateControl(Westwind.Web.Controls.DataBindingItem Item)
            {
                if (Item.ControlInstance == txtCategoryId)
                {
                    DropDownList List = Item.ControlInstance as DropDownList;
                    if (List.SelectedItem.Text == &quot;Dairy Products&quot;)
                    {
                        Item.BindingErrorMessage = &quot;Dairy Properties not allowed 
            (ValidateControl)&quot;;
                        return false;
                    }
                }
            
                return true;
            }&lt;&lt;/code&gt;&gt;
            </example>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.BeforeBindControl">
            <summary>
            Fired just before the control is bound. You can return false from the 
            handler to cause the control to not be bound
            <seealso>Class DataBinder</seealso>
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.AfterBindControl">
            <summary>
            Fires immediately after the control has been bound. You can check for
            errors or perform additional validation.
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.BeforeUnbindControl">
            <summary>
            Fires immediately before unbinding of a control takes place.
            You can return false to abort DataUnbinding.
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBinder.AfterUnbindControl">
            <summary>
            Fires immediately after binding is complete. You can check for errors 
            and take additional action. 
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBinderDesigner">
            <summary>
            Control designer used so we get a grey button display instead of the 
            default label display for the control.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBindingItem">
             <summary>
             An individual binding item. A BindingItem maps a source object - 
             a property/field or database field - to a property of a Control object.
            
             The object is a child for the DataBinder object which acts as a master
             object that performs the actual binding of individual BingingItems.
             
             Binding Items can be attached to controls and if the control implements the
             IDataBinder.
             
             Note: This class inherits from Component so the designer can properly render
                   the item as an extender control.
             </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBindingItem.DesignMode">
            <summary>
            Explicitly set designmode flag - stock doesn't work on Collection child items
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.#ctor(Westwind.Web.Controls.DataBinder)">
            <summary>
            Overridden constructor to allow DataBinder to be passed
            as a reference. Unfortunately ASP.NET doesn't fire this when
            creating the DataBinder child items.
            </summary>
            <param name="Parent"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.OnValidate">
            <summary>
            Fires the Validation Event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.DataBind">
            <summary>
            Binds a source object and property to a control's property. For example
            you can bind a business object to a the text property of a text box, or 
            a DataRow field to a text box field. You specify a binding source object 
            (Customer.Entity or Customer.DataRow) and property or field(Company, FirstName)
            and bind it to the control and the property specified (Text).
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.DataBind(System.Web.UI.Control)">
            <summary>
            Binds a source object and property to a control's property. For example
            you can bind a business object to a the text property of a text box, or 
            a DataRow field to a text box field. You specify a binding source object 
            (Customer.Entity or Customer.DataRow) and property or field(Company, FirstName)
            and bind it to the control and the property specified (Text).
            </summary>
            <param name="container">the Base control that binding source objects are attached to</param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.Unbind">
            <summary>
            Unbinds control properties back into the control source.
            
            This method uses reflection to lift the data out of the control, then 
            parses the string value back into the type of the data source. If an error 
            occurs the exception is not caught internally, but generally the 
            FormUnbindData method captures the error and assigns an error message to 
            the BindingErrorMessage property of the control.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.Unbind(System.Web.UI.Control)">
            <summary>
            Unbinds control properties back into the control source.
            
            This method uses reflection to lift the data out of the control, then 
            parses the string value back into the type of the data source. If an error 
            occurs the exception is not caught internally, but generally the 
            FormUnbindData method captures the error and assigns an error message to 
            the BindingErrorMessage property of the control.
            <seealso>Class wwWebDataHelper</seealso>
            </summary>
            <param name="WebPage">
            The base control that binding sources are based on.
            </param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItem.ToString">
            <summary>
            Returns a the control bindingsource and binding source member
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.Binder">
            <summary>
            Reference to the DataBinder parent object.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.ControlId">
            <summary>
            The ID of the control to that is bound.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.ControlInstance">
            <summary>
            An optional instance of the control that can be assigned. Used internally
            by the DataBindiner to assign the control whenever possible as the instance
            is more efficient and reliable than the string name.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.UnboundValue">
            <summary>
            The value that is to be assigned to the control after unbinding.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingSource">
             <summary>
             The binding source object that is the source for databinding.
             This is an object of some sort and can be either a real object
             or a DataRow/DataTable/DataSet. If a DataTable is used the first row 
             is assumed. If a DataSet is used the first table and first row are assumed.
            
             The object reference is always Page relative, so binding doesn't work
             against local variables, only against properties of the form. Form
             properties that are bound should be marked public or protected, but
             not private as Reflection is used to get the values. 
             
             This or me is implicit, but can be specified so
              "Customer" or "this.Customer" is equivalent. 
             </summary>
             <example>
             // Bind a DataRow Item
             bi.BindingSource = "Customer.DataRow";
             bi.BindingSourceMember = "LastName";
            
             // Bind a DataRow within a DataSet  - not recommended though
             bi.BindingSource = "this.Customer.Tables["TCustomers"].Rows[0]";
             bi.BindingSourceMember = "LastName";
            
             // Bind an Object
             bi.BindingSource = "InventoryItem.Entity";
             bi.BindingSourceMember = "ItemPrice";
             
             // Bind a form property
             bi.BindingSource = "this";   // also "me" 
             bi.BindingSourceMember = "CustomerPk";
             </example>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingSourceObject">
            <summary>
            An instance of the object that the control is bound to
            Optional - can be passed instead of a BindingSource string. Using
            a reference is more efficient. Declarative use in the designer
            always uses strings, code base assignments should use instances
            with BindingSourceObject.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingSourceMember">
            <summary>
            The property or field on the Binding Source that is
            bound. Example: BindingSource: Customer.Entity BindingSourceMember: Company
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingProperty">
            <summary>
            Property that is bound on the target controlId
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.DisplayFormat">
            <summary>
            Format Expression ( {0:c) ) applied to the binding source when it's displayed.
            Watch out for two way conversion issues when formatting this way. If you create
            expressions and you are also saving make sure the format used can be saved back.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.IsRequired">
            <summary>
            If set requires that the control contains a value, otherwise a validation error is thrown
            Useful mostly on TextBox controls only.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.HtmlEncode">
            <summary>
            Determines whether the content displayed is Html encoded to prevent script injection
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.UserFieldName">
            <summary>
            A descriptive name for the field used for error display
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.ErrorMessageLocation">
            <summary>
            Determines how binding and validation errors display on the control
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.IsBindingError">
            <summary>
            Internal property that lets you know if there was binding error
            on this control after binding occurred
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingErrorMessage">
            <summary>
            An error message that gets set if there is a binding error
            on the control. If this value is pre-set this value is used
            instead of an auto-generated message
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItem.BindingMode">
            <summary>
            Determines how databinding and unbinding is done on the target control. 
            One way only fires DataBind() and ignores Unbind() calls. 
            Two-way does both. None effectively turns off binding.
            </summary>
        </member>
        <member name="E:Westwind.Web.Controls.DataBindingItem.Validate">
            <summary>
            Use this event to hook up special validation logic. Called after binding completes. Return false to indicate validation failed
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.BindingErrorMessageLocations">
            <summary>
            Enumeration for the various binding error message locations possible
            that determine where the error messages are rendered in relation to the
            control.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.WarningIconRight">
            <summary>
            Displays an image icon to the right of the control
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.TextExclamationRight">
            <summary>
            Displays a text ! next to the control 
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.RedTextBelow">
            <summary>
            Displays the error message as text below the control
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.RedTextAndIconBelow">
            <summary>
            Displays an icon and the text of the message below the control.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingErrorMessageLocations.None">
            <summary>
            No binding
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.BindingModes">
            <summary>
            Determines how databinding is performed for the target control. Note that 
            if a DataBindingItem is  marked for None or OneWay, the control will not 
            be unbound or in the case of None bound even when an explicit call to 
            DataBind() or Unbind() is made.
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.TwoWay">
            <summary>
            Databinding occurs for DataBind() and Unbind()
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.OneWay">
            <summary>
            DataBinding occurs for DataBind() only
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.UnbindOnly">
            <summary>
            DataBinding occurs for Unbind() Only 
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.BindingModes.None">
            <summary>
            No binding occurs (useful for conditional) enabling of binding via code
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBindingValidationEventArgs">
            <summary>
            Event Args passed to a Validate event of a DataBindingItem control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingValidationEventArgs.DataBindingItem">
            <summary>
            Instance of the DataBinding Control that fired this Validation event.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingValidationEventArgs.IsValid">
            <summary>
            Out flag that determines whether this control value is valid.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.DataBindingItemCollection">
            <summary>
            Collection of individual DataBindingItems. Implemented explicitly as
            a CollectionBase class rather than using List#DataBindingItems#
            so that Add can be overridden
            </summary>
        </member>
        <member name="F:Westwind.Web.Controls.DataBindingItemCollection._ParentDataBinder">
            <summary>
            Internal reference to the DataBinder object
            that is passed to the individual items if available
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.#ctor(Westwind.Web.Controls.DataBinder)">
            <summary>
            Preferred Constructor - Add a reference to the DataBinder object here
            so a reference can be passed to the children.
            </summary>
            <param name="Parent"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.#ctor">
            <summary>
            Not the preferred constructor - If possible pass a reference to the
            Binder object in the overloaded version.
            </summary>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.Add(Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Add a DataBindingItem to the collection
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.AddAt(System.Int32,Westwind.Web.Controls.DataBindingItem)">
            <summary>
            Add a DataBindingItem to the collection
            </summary>
            <param name="index"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Westwind.Web.Controls.DataBindingItemCollection.UpdateListInDesignMode">
            <summary>
            We have to delete 'empty' items because the designer requires items to be 
            added to the collection just for editing. This way we may have one 'extra'
            item, but not a whole long list of items.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.DataBindingItemCollection.Item(System.Int32)">
            <summary>
            Public indexer for the Items
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.BitmapOutputReturnedMustSpecifyAContentType">
            <summary>
              Looks up a localized string similar to Bitmap output returned must specify a Content type. For example: [CallbackMethod(ContentType=&quot;image/png&quot;)].
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.CanTGetValuesIfAllowUpdatesIsNotSetToTrue">
            <summary>
              Looks up a localized string similar to Can&apos;t get values if AllowUpdates is not set to true.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ERROR_CLASSWRAPPER_FORWCFASMX_REQUIRES_CLIENTPROXYTYPE">
            <summary>
              Looks up a localized string similar to In order to call a Wcf or ASMX service you have to specify ClientProxyTargetType of the Web Service instance..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ERROR_INVALID_JSON_STRING">
            <summary>
              Looks up a localized string similar to Invalid JSON string input..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ERROR_ONLYONE_SCRIPTCONTAINER_PER_PAGE_ALLOWED">
            <summary>
              Looks up a localized string similar to Only one ScriptContainer is allowed per page..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ERROR_ScriptContainer_OnlyWorks_With_PageBasedHandlers">
            <summary>
              Looks up a localized string similar to ScriptContainer.Current only works with Page based handlers..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ERROR_UnableToConvertContentTypeToImageFormat">
            <summary>
              Looks up a localized string similar to Unable to convert content type {0} to ImageFormat.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ERROR_UnableToConvertImageFormatToContentType">
            <summary>
              Looks up a localized string similar to Unable to convert ImageFormat {0} to ContentType.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.InvalidBindingSource">
            <summary>
              Looks up a localized string similar to Invalid BindingSource.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.InvalidControl">
            <summary>
              Looks up a localized string similar to Invalid Control.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.InvalidControlId">
            <summary>
              Looks up a localized string similar to Invalid Control Id.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.InvalidServerMethod">
            <summary>
              Looks up a localized string similar to Invalid Server Method..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.InvalidURLRelativeURLNotAllowed">
            <summary>
              Looks up a localized string similar to Invalid URL: Virtual path relative URL (~) not allowed when HttpContext not available..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.NotAllowedMethodExpectsVerb">
            <summary>
              Looks up a localized string similar to Not allowed. Method expects {0}..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.ServerMethodIsNotAccessibleDueToMissing">
            <summary>
              Looks up a localized string similar to Server method is not accessible due to missing CallbackMethod attribute.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.UnsupportedJSONSerializerSpecified">
            <summary>
              Looks up a localized string similar to Unsupported JSON Serializer specified. Json.Net and System.Web.Extensions must be explicitly compiled in..
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.Properties.Resources.WebResourceNotAvailableForJQueryUI">
            <summary>
              Looks up a localized string similar to WebResource not available for jQuery UI.
            </summary>
        </member>
        <member name="T:Westwind.Web.ControlResources">
            <summary>
            Class is used as to consolidate access to resources
            </summary>
        </member>
        <member name="M:Westwind.Web.ControlResources.GetStringResource(System.Reflection.Assembly,System.String)">
            <summary>
            Returns a string resource from a given assembly.
            </summary>
            <param name="assembly">Assembly reference (ie. typeof(ControlResources).Assembly) </param>
            <param name="ResourceName">Name of the resource to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ControlResources.GetStringResource(System.String)">
            <summary>
            Returns a string resource from the from the ControlResources Assembly
            </summary>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="F:Westwind.Web.ControlResources.jQueryLoadMode">
            <summary>
            Determines what location jQuery is loaded from
            </summary>
        </member>
        <member name="F:Westwind.Web.ControlResources.jQueryCdnUrl">
            <summary>
            jQuery CDN Url on Google
            </summary>
        </member>
        <member name="F:Westwind.Web.ControlResources.jQueryCdnFallbackUrl">
            <summary>
            Fallback Url if CDN can't be reached.
            </summary>
        </member>
        <member name="F:Westwind.Web.ControlResources.jQueryUiCdnUrl">
            <summary>
            jQuery CDN Url on Google
            </summary>
        </member>
        <member name="F:Westwind.Web.ControlResources.jQueryUiLocalFallbackUrl">
            <summary>
            jQuery UI fallback Url if CDN is unavailable or WebResource is used
            Note: The file needs to exist and hold the minimized version of jQuery ui
            </summary>
        </member>
        <member name="M:Westwind.Web.ControlResources.jQueryLink(Westwind.Web.jQueryLoadModes,System.String)">
            <summary>
            Inserts a script link to load jQuery into the page based on the jQueryLoadModes settings
            of this class. Default load is by CDN plus WebResource fallback
            </summary>
            <param name="url">
            An optional explicit URL to load jQuery from. Url is resolved. 
            When specified no fallback is applied
            </param>        
            <returns>full script tag and fallback script for jQuery to load</returns>
        </member>
        <member name="M:Westwind.Web.ControlResources.jQueryUiLink(Westwind.Web.jQueryLoadModes,System.String)">
            <summary>
            Inserts a script link to load jQuery into the page based on the jQueryLoadModes settings
            of this class. Default load is by CDN plus WebResource fallback
            </summary>
            <param name="url">
            An optional explicit URL to load jQuery from. Url is resolved. 
            When specified no fallback is applied
            </param>        
            <returns>full script tag and fallback script for jQuery to load</returns>
        </member>
        <member name="M:Westwind.Web.ControlResources.wwJqueryLink(Westwind.Web.jQueryLoadModes,System.String)">
            <summary>
            Returns a fully qualified script tag for loading ww.jquery.js
            </summary>
            <param name="jQueryLoadMode"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ControlResources.LoadjQuery(System.Web.UI.Control,System.String)">
            <summary>
            Loads the appropriate jScript library out of the scripts directory
            </summary>
            <param name="control"></param>
            <param name="jQueryUrl">Optional url to jQuery as a virtual or absolute server path</param>\
        </member>
        <member name="M:Westwind.Web.ControlResources.LoadwwjQuery(System.Web.UI.Control,System.Boolean)">
            <summary>
            Loads the ww.jquery.js library from Resources at the end of the Html Header (if available)
            </summary>
            <param name="control"></param>
            <param name="loadjQuery"></param>
        </member>
        <member name="M:Westwind.Web.ControlResources.LoadjQueryUi(System.Web.UI.Control,System.String)">
            <summary>
            Loads the appropriate jScript library out of the scripts directory
            </summary>
            <param name="control"></param>
            <param name="jQueryUiUrl">Optional url to jQuery as a virtual or absolute server path</param>
        </member>
        <member name="T:Westwind.Web.ClientScriptProxy">
            <summary>
            This is a proxy object for the Page.ClientScript and MS Ajax ScriptManager 
            object that can operate when MS Ajax when present otherwise falling back to
             Page.ClientScript. Because MS Ajax may not be available accessing the 
            methods directly is not possible and we are required to indirectly 
            reference client script methods through this class.
            
            This class should be invoked at the Control's start up and be used to 
            replace all calls Page.ClientScript. Scriptmanager calls are made through 
            Reflection indirectly so there's no dependency on the script manager.
            
            This class also provides a few additional page injection helpers like the 
            abillity to load scripts in the page header (rather than in the body) and 
            to use script compression using wwScriptCompressionModule without using MS 
            Ajax.
            </summary>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy.DefaultScriptRenderMode">
            <summary>
            Determines the default script rendering mode that is uses if no script rendering mode
            is explicitly provided on the control.
            
            This setting is global and should be set only once in Appplication_Start or
            a static constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Westwind.Web.ClientScriptProxy.ScriptResourceAliases" -->
        <member name="F:Westwind.Web.ClientScriptProxy._IsMsAjax">
            <summary>
            Internal global static that gets set when IsMsAjax() is
            called. The result is cached once per application so 
            we don't have keep making reflection calls for each access
            </summary>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy._CheckedForMsAjax">
            <summary>
            Flag that determines whether check was previously done
            </summary>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy._IsScriptManagerOnPage">
            <summary>
            Cached value to see whether the script manager is
            on the page. This value caches here once per page.
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.#ctor">
            <summary>
            No public constructor - use ClientScriptProxy.Current to
            get an instance to ensure you once have one instance per
            page active.
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.ClearContextItemsOnTransfer">
            <summary>
            Clears all the request specific context items which are script references
            and the script placement index.
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.IsMsAjax">
            <summary>
            Checks to see if MS Ajax is registered with the current
            Web application.
            
            Note: Method is static so it can be directly accessed from
            anywhere. If you use the IsMsAjax property to check the
            value this method fires only once per application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.IsScriptManagerOnPage(System.Web.UI.Page)">
            <summary>
            Checks to see if a script manager is on the page
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.LoadControlScript(System.Web.UI.Control,System.String,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            High level helper function  that is used to load script resources for various AJAX controls
            Loads a script resource based on the following scriptLocation values:
            
            * WebResource
              Loads the Web Resource specified out of ControlResources. Specify the resource
              that applied in the resourceName parameter
              
            * Url/RelativeUrl
              loads the url with ResolveUrl applied
              
            * empty string (no value) 
              No action is taken and nothing is embedded into the page. Use this if you manually
              want to load resources
            </summary>
            <param name="control">The control instance for which the resource is to be loaded</param>
            <param name="scriptLocation">WebResource, a virtual path or a full Url. Empty to not embed any script refs (ie. user loads script herself)</param>
            <param name="resourceName">The name of the resource when WebResource is used for scriptLocation null otherwise</param>
            <param name="topOfHeader">Determines if scripts are loaded into the header whether they load at the top or bottom</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            Returns a WebResource or ScriptResource URL for script resources that are to be
            embedded as script includes.
            </summary>
            <param name="control">Any control</param>
            <param name="type">A type in assembly where resources are located</param>
            <param name="resourceName">Name of the resource to load</param>
            <param name="renderMode">Determines where in the document the link is rendered</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)">
            <summary>
            Registers a script include tag into the page for an external script url.
            
            This version embeds only in the body of the HTML document - ie. underneath the form tag      
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="url"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,Westwind.Web.ScriptRenderModes)">
            <summary>
            Registers a client script reference into the page with the option to specify
            the script location in the page
            </summary>
            <param name="control">Any control instance - typically page</param>
            <param name="type">Type that acts as qualifier (uniqueness)</param>
            <param name="url">the Url to the script resource</param>
            <param name="ScriptRenderModes">Determines where the script is rendered</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterCssResource(System.Web.UI.Control,System.Type,System.String)">
            <summary>
            Registers a CSS Web Resource in the page
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
        </member>
        <member name="F:Westwind.Web.ClientScriptProxy.cssLinks">
            <summary>
            Keep track of keys that were written
            </summary>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterCssLink(System.Web.UI.Control,System.Type,System.String,System.String)">
            <summary>
            Registers a CSS stylesheet in the page header and if that's not accessible inside of the form tag.
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="url"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Registers a client script block in the page.
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="script"></param>
            <param name="addScriptTags"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean,Westwind.Web.ScriptRenderModes)">
            <summary>
            Renders client script block with the option of rendering the script block in
            the Html header
            
            For this to work Header must be defined as runat="server"
            </summary>
            <param name="control">any control that instance typically page</param>
            <param name="type">Type that identifies this rendering</param>
            <param name="key">unique script block id</param>
            <param name="script">The script code to render</param>
            <param name="addScriptTags">Ignored for header rendering used for all other insertions</param>
            <param name="renderMode">Where the block is rendered</param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Registers a startup code snippet that gets placed at the bottom of the page
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="key"></param>
            <param name="script"></param>
            <param name="addStartupTags"></param>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetWebResourceUrl(System.Web.UI.Control,System.Type,System.String)">
            <summary>
            Returns a WebResource URL for non script resources
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetWebResourceUrl(System.Type,System.String)">
            <summary>
            Returns a WebResource URL for non script resources
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetClientScriptResourceUrl(System.Web.UI.Control,System.Type,System.String)">
            <summary>
            Works like GetWebResourceUrl but can be used with javascript resources
            to allow using of resource compression (if the Script Compression Module is loaded).
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.GetClientScriptResourceUrl(System.Type,System.String)">
            <summary>
            Works like GetWebResourceUrl but can be used with javascript resources
            to allow using of resource compression (if the module is loaded).
            </summary>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ClientScriptProxy.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Injects a hidden field into the page
            </summary>
            <param name="control"></param>
            <param name="hiddenFieldName"></param>
            <param name="hiddenFieldInitialValue"></param>
        </member>
        <member name="P:Westwind.Web.ClientScriptProxy.Current">
            <summary>
            Current instance of this class which should always be used to 
            access this object. There are no public constructors to
            ensure the reference is used as a Singleton to further
            ensure that all scripts are written to the same clientscript
            manager.
            </summary>        
        </member>
        <member name="T:Westwind.Web.ScriptRenderModes">
            <summary>
            Determines how scripts are included into the page
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.Inherit">
            <summary>
            Inherits the setting from the control or from the ClientScript.DefaultScriptRenderMode
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Westwind.Web.ScriptRenderModes.Inline" -->
        <member name="F:Westwind.Web.ScriptRenderModes.Header">
            <summary>
            Renders the script include into the bottom of the header of the page
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.HeaderTop">
            <summary>
            Renders the script include into the top of the header of the page
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.Script">
            <summary>
            Uses ClientScript or ScriptManager to embed the script include to
            provide standard ASP.NET style rendering in the HTML body.
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptRenderModes.BottomOfPage">
            <summary>
            Renders script at the bottom of the page before the last Page.Controls
            literal control. Note this may result in unexpected behavior 
            if /body and /html are not the last thing in the markup page.
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.Alias">
            <summary>
            An alias/shortcut resource name
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.FileId">
            <summary>
            The name of the script file that this resource maps to. Should be just
            the filename (ie. jquery.js or ww.jquery.js) as well as min.js versions
            if those files are loaded as well
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.Resource">
            <summary>
            The full resource name to the resourceToFileItem
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptResourceAlias.ControlType">
            <summary>
            Any type in the assembly that contains the script resource
            If null looks in the current executing assembly.
            </summary>
        </member>
        <member name="T:Westwind.Web.JavaScriptMinifier">
            <summary>
            JavaScript minifier strips white space and comments from JavaScript 
            code. Based on Douglas Crockford's JavaScript Minifier with some modification
            to support string and StreamReader conversions.
            
            This class can minify strings in memory or files and entire directories of
            disk files.
            
            The MinifyDirectory() method can be used in the build process for VS or 
            can easily be used at application startup to automatically create minified
            script files for an application.
            </summary>
        </member>
        <member name="M:Westwind.Web.JavaScriptMinifier.Minify(System.String,System.String)">
            <summary>
            Minifies a source file into a target file.
            </summary>
            <param name="sourceFile">Source file that is to be compressed</param>
            <param name="targetFile">Target file that is to contain the compressed output</param>
        </member>
        <member name="M:Westwind.Web.JavaScriptMinifier.MinifyString(System.String)">
            <summary>
            Minifies a JavaScript code string into a minified string.
            </summary>
            <param name="sourceJavaScriptString">Input Javascript string to be minified</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JavaScriptMinifier.MinifyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Minifies all JavaScript files in a given directory and writes out the 
            minified files to a new file extensions (.min.js for example).
            
            This method can be integrated into the build process, or as part of an 
            application's startup to always create new minified scripts as needed. 
            Scripts are only minified if the minified files don't already exist and are
             older than the corresponding JavaScript file.
            
            A common usage scenario is to call this static method from 
            Application_Start:
            
            &lt;&lt;code lang="C#"&gt;&gt;void Application_Start(object sender, 
            EventArgs e)
            {
                // creates minify scripts if don't exist or are changed
                // NOTE: REQUIRES that IIS/ASP.NET Account has writes to write 
            here!
                
            Westwind.Web.Controls.JavaScriptMinifier.MinifyDirectory(Server.MapPath("~/
            scripts"), ".min.js", true);
            }&lt;&lt;/code&gt;&gt;
            
            to always ensure minified files are in sync with corresponding JavaScript 
            files.
            <seealso>Class JavaScriptMinifier                                                        </seealso>
            </summary>
            <param name="path">
            The path where files are to be minfied
            </param>
            <param name="minExtension">
            The extension for the minified files (ie. .min.js). Include leading dot!
            </param>
            <param name="recursive">
            Determines whether nested directories are also included
            </param>
            <remarks>
            Note that if you use this script from within an ASP.NET application it's 
            best to hook it to a Application_Start or a static constructor so it only 
            fires once.
            
            When called from ASP.NET this routine REQUIRES that the server account that
             ASP.NET/IIS AppPool runs under (NETWORK SERVICE by default) has rights to 
            write out the file to the folder specified. Otherwise an exception occurs.
            </remarks>
        </member>
        <member name="T:Westwind.Web.JsonCallbackMethodProcessor">
            <summary>
            This is the core implementation of the JSON callback method handler that 
            picks up POST data from the request and uses it to call the actual callback
             method on the specified object and return the results back as JSON.
            
            This processor is generic and can be used easily from anywhere that needs 
            to feed back JSON data from a method callback, simply calling the 
            ProcessCallbackMethod() with an object that contains methods that are 
            marked up with the [CallbackMethod] attribute.
            
            For example, wwCallbackHandler simply forwards all processing like this:
            
            &lt;&lt;code lang="C#"&gt;&gt;public void ProcessRequest(HttpContext 
            context)
            {
                // Pass off to the worker Callback Processor
                ICallbackMethodProcessor processor = new JsonCallbackMethodProcessor();
            
                // Process the inbound request and execute it on this
                // Http Handler's methods
                processor.ProcessCallbackMethodCall(this);
            }&lt;&lt;/code&gt;&gt;
            
            This processor is expected to execute in an environment where 
            HttpContext.Current is available and where POST data is available to 
            describe the incoming parameter data and method to call.
            </summary>
        </member>
        <member name="M:Westwind.Web.JsonCallbackMethodProcessor.ProcessCallbackMethodCall(System.Object,System.String)">
            <summary>
            Generic method that handles processing a Callback request by routing to
            a method in a provided target object.
            
            </summary>
            <param name="target">The target object that is to be called. If null this is used</param>
        </member>
        <member name="M:Westwind.Web.JsonCallbackMethodProcessor.HandleSpecialReturnTypes(System.Object,Westwind.Web.CallbackMethodAttribute,System.Web.HttpRequest,System.Web.HttpResponse)">
            <summary>
            This method handles special return types from callback methods
            by examining the return type or the ResultFormat query string.
            
            Checks are performed for:
            Stream, Bitmap, byte[] and raw string output
            </summary>
            <param name="Result"></param>
            <param name="callbackAttribute"></param>
            <param name="Request"></param>
            <param name="Response"></param>
        </member>
        <member name="M:Westwind.Web.JsonCallbackMethodProcessor.ProcessCallbackMethodCall(System.Object)">
            <summary>
            Generic method that handles processing a Callback request by routing to
            a method in a provided target object.
            
            This version doesn't pass in the method name but retrieves it from the
            POST data or query string.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Westwind.Web.JsonCallbackMethodProcessor.WriteErrorResponse(System.String,System.String)">
            <summary>
            Returns an error response to the client from a callback. Code
            should exit after this call.
            </summary>
            <param name="ErrorMessage"></param>
        </member>
        <member name="P:Westwind.Web.JsonCallbackMethodProcessor.JsonPMethod">
            <summary>
            JSONP method parameter value if provided
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.JSONSerializerBase.masterSerializer">
            <summary>
            Master instance of the JSONSerializer that the user interacts with
            Used to read option properties
            </summary>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.JSONSerializerBase.#ctor(Westwind.Web.JsonSerializers.JSONSerializer)">
            <summary>
             Force a master Serializer to be passed for settings
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.JSONSerializerBase.DateSerializationMode">
            <summary>
            Encodes Dates as a JSON string value that is compatible
            with MS AJAX and is safe for JSON validators. If false
            serializes dates as new Date() expression instead.
            
            The default is true.
            </summary>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.JSONSerializerBase.FormatJsonOutput">
            <summary>
            Determines if there are line breaks inserted into the 
            JSON to make it more easily human readable.
            </summary>
        </member>
        <member name="T:Westwind.Web.JsonSerializers.JsonNetJsonSerializer">
            <summary>
            More text is a basic JSON serializer and deserializer that 
            deals with standard .NET types. Unlike the MS Ajax JSONSerializer
            parser this parser support serialization and deserialization without 
            explicit type markup in the JSON resulting in a simpler two-way model.
            
            The inbound model for complex types is based on Reflection parsing
            of properties.
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.JsonNetJsonSerializer.masterSerializer">
            <summary>
            Master instance of the JSONSerializer that the user interacts with
            Used to read option properties
            </summary>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.JsonNetJsonSerializer.#ctor(Westwind.Web.JsonSerializers.JSONSerializer)">
            <summary>
             Force a master Serializer to be passed for settings
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.JsonNetJsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes a .NET object reference into a JSON string.
            
            The serializer supports:
            &lt;&lt;ul&gt;&gt;
            &lt;&lt;li&gt;&gt; All simple types
            &lt;&lt;li&gt;&gt; POCO objects and hierarchical POCO objects
            &lt;&lt;li&gt;&gt; Arrays
            &lt;&lt;li&gt;&gt; IList based collections
            &lt;&lt;li&gt;&gt; DataSet
            &lt;&lt;li&gt;&gt; DataTable
            &lt;&lt;li&gt;&gt; DataRow
            &lt;&lt;/ul&gt;&gt;
            
            The serializer works off any .NET type - types don't have to be explicitly 
            serializable.
            
            DataSet/DataTable/DataRow parse into a special format that is essentially 
            array based of just the data. These objects can be serialized but cannot be
             passed back in via deserialization.
            <seealso>Class JSONSerializer</seealso>
            </summary>
            <param name="value">
            The strongly typed value to parse
            </param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.JsonNetJsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Takes a JSON string and attempts to create a .NET object from this  
            structure. An input type is required and any type that is serialized to  
            must support a parameterless constructor.
            
            The de-serializer instantiates each object and runs through the properties
            
            The deserializer supports &lt;&lt;ul&gt;&gt; &lt;&lt;li&gt;&gt; All simple 
            types &lt;&lt;li&gt;&gt; Most POCO objects and Hierarchical POCO objects 
            &lt;&lt;li&gt;&gt; Arrays and Object Arrays &lt;&lt;li&gt;&gt; IList based 
            collections &lt;&lt;/ul&gt;&gt;
            
            Note that the deserializer doesn't support DataSets/Tables/Rows like the  
            serializer as there's no type information available from the client to  
            create these objects on the fly.
            <seealso>Class JSONSerializer</seealso>
            </summary>
            <param name="JSONText">
            A string of JSON text passed from the client.
            </param>
            <param name="valueType">
            The type of the object that is to be created from the JSON text.
            </param>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.JsonNetJsonSerializer.DateSerializationMode">
            <summary>
            Encodes Dates as a JSON string value that is compatible
            with MS AJAX and is safe for JSON validators. If false
            serializes dates as new Date() expression instead.
            
            The default is true.
            </summary>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.JsonNetJsonSerializer.FormatJsonOutput">
            <summary>
            Determines if there are line breaks inserted into the 
            JSON to make it more easily human readable.
            </summary>
        </member>
        <member name="T:Westwind.Web.JsonSerializers.JSONSerializer">
            <summary>
            The high level JSON Serializer wrapper that provides 
            serialization and deserialization services to the application. 
            
            This class merely defers operation to the specified JSON parsing implementation
            to allow for pluggable JSON serializers to be used.
            
            Supported parsers include:
            
            * West Wind Native that's built-in (no dependencies)   (This is the default)
            * JavaScriptSerializer (ASP.NET JavaScript Serializer)
            * JSON.NET   (requires JSON.NET assembly to be included and JSONNET_REFERENCE global Define    
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.JSONSerializer.DefaultJsonParserType">
            <summary>
            This property determines the default parser that is created when
            using the default constructor. This is also the default serializer
            used when using the AjaxMethodCallback control.
            
            This property should be set only once at application startup typically
            in Application_Start of a Web app.
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.JSONSerializer.SerializeFields">
            <summary>
            Determines whether fields are serialized. Supported only for the West Wind JSON Serializer        
            </summary>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.JSONSerializer.#ctor">
            <summary>
            Default Constructor - assigns default 
            </summary>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.JSONSerializer.DateSerializationMode">
            <summary>
            Determines the date serialization mode supported 
            for the Westwind and Json.NET parsers (not the JavaScript JSON Serializer)
            </summary>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.JSONSerializer.FormatJsonOutput">
            <summary>
            Determines if there are line breaks inserted into the 
            JSON to make it more easily human readable.
            
            By default if running in DebugMode this flag will be set to true
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.SupportedJsonParserTypes.WestWindJsonSerializer">
            <summary>
            Default - West Wind JSON parser.
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.SupportedJsonParserTypes.JsonNet">
            <summary>
            NewtonSoft JSON.NET JSON Parser
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.SupportedJsonParserTypes.JavaScriptSerializer">
            <summary>
            The ASP.NET JavaScript Serializer
            </summary>
        </member>
        <member name="T:Westwind.Web.JsonSerializers.JsonDateEncodingModes">
            <summary>
            Enumeration that determines how JavaScript dates are
            generated in JSON output
            </summary>
        </member>
        <member name="T:Westwind.Web.JsonSerializers.WebExtensionsJavaScriptSerializer">
            <summary>
            More text is a basic JSON serializer and deserializer that 
            deals with standard .NET types. Unlike the MS Ajax JSONSerializer
            parser this parser support serialization and deserialization without 
            explicit type markup in the JSON resulting in a simpler two-way model.
            
            The inbound model for complex types is based on Reflection parsing
            of properties.
            </summary>
        </member>
        <member name="T:Westwind.Web.JsonSerializers.WestwindJsonSerializer">
            <summary>
            More text is a basic JSON serializer and deserializer that 
            deals with standard .NET types. Unlike the MS Ajax JSONSerializer
            parser this parser support serialization and deserialization without 
            explicit type markup in the JSON resulting in a simpler two-way model.
            
            The inbound model for complex types is based on Reflection parsing
            of properties.
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.WestwindJsonSerializer.STR_WHITESPACE">
            <summary>
            White space checking for char values
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.WestwindJsonSerializer.DAT_JAVASCRIPT_BASEDATE">
            <summary>
            The JavaScript base date on which all date time values
            in JavaScript are based. Offsets are given in milliseconds
            (ie. new Date(99990123) where the number is the offset in ms
            from the base date)
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.WestwindJsonSerializer.masterSerializer">
            <summary>
            Master instance of the JSONSerializer that the user interacts with
            Used to read option properties
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.WestwindJsonSerializer._traversedTypes">
            <summary>
            Internally held set of types traversed. Circular references are
            not serialized and return null
            </summary>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.WestwindJsonSerializer.SerializeFields">
            <summary>
            Determines whether fields are serialized
            </summary>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.#ctor(Westwind.Web.JsonSerializers.JSONSerializer)">
            <summary>
             Force a master Serializer to be passed for settings
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.#ctor">
            <summary>
            Master Serializer contructor is preferred
            </summary>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes a .NET object reference into a JSON string.
            
            The serializer supports:
            &lt;&lt;ul&gt;&gt;
            &lt;&lt;li&gt;&gt; All simple types
            &lt;&lt;li&gt;&gt; POCO objects and hierarchical POCO objects
            &lt;&lt;li&gt;&gt; Arrays
            &lt;&lt;li&gt;&gt; IList based collections
            &lt;&lt;li&gt;&gt; DataSet
            &lt;&lt;li&gt;&gt; DataTable
            &lt;&lt;li&gt;&gt; DataRow
            &lt;&lt;/ul&gt;&gt;
            
            The serializer works off any .NET type - types don't have to be explicitly 
            serializable.
            
            DataSet/DataTable/DataRow parse into a special format that is essentially 
            array based of just the data. These objects can be serialized but cannot be
             passed back in via deserialization.
            <seealso>Class JSONSerializer</seealso>
            </summary>
            <param name="value">
            The strongly typed value to parse
            </param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Takes a JSON string and attempts to create a .NET object from this  
            structure. An input type is required and any type that is serialized to  
            must support a parameterless constructor.
            
            The de-serializer instantiates each object and runs through the properties
            
            The deserializer supports &lt;&lt;ul&gt;&gt; &lt;&lt;li&gt;&gt; All simple 
            types &lt;&lt;li&gt;&gt; Most POCO objects and Hierarchical POCO objects 
            &lt;&lt;li&gt;&gt; Arrays and Object Arrays &lt;&lt;li&gt;&gt; IList based 
            collections &lt;&lt;/ul&gt;&gt;
            
            Note that the deserializer doesn't support DataSets/Tables/Rows like the  
            serializer as there's no type information available from the client to  
            create these objects on the fly.
            <seealso>Class JSONSerializer</seealso>
            </summary>
            <param name="JSONText">
            A string of JSON text passed from the client.
            </param>
            <param name="valueType">
            The type of the object that is to be created from the JSON text.
            </param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes JSON string into a specified type value.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="jsonText"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.WriteValue(System.Text.StringBuilder,System.Object)">
             <summary>
             Serialization routine that takes any value and serializes
             it into JSON. 
             
             Date formatting follows Microsoft ASP.NET AJAX format which
             represents dates as strings in the format of: "\/Date(231231231)\/"
            
             This code is based originally on Jason Diamond's JSON code
             in Anthem.NET although heavy modifications have been made.
             </summary>
             <param name="sb"></param>
             <param name="val"></param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.WriteString(System.Text.StringBuilder,System.String)">
            <summary>
            Writes a string as a JSON string
            </summary>
            <param name="sb"></param>
            <param name="s"></param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.WriteDate(System.Text.StringBuilder,System.DateTime)">
            <summary>
            Writes a date out as a JSON string into the string builder.
            
            Data format is set based serialized based on the DateSerializationMode.         
            </summary>
            <param name="sb"></param>
            <param name="universalDate"></param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.WriteDictionary(System.Text.StringBuilder,System.Collections.IDictionary)">
            <summary>
            Outputs any dictionary type that has a string key.
            Non string keys will cause an exception.
            </summary>
            <param name="sb"></param>
            <param name="dict"></param>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.UnicodeEscapeMatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Unescapes string encoded Unicode character in the format of \u03AF
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.ParseValueString(System.String,System.Type)">
            <summary>
            High level parsing method that takes a JSON string and tries to
            convert it to the appropriate type. 
            </summary>
            <param name="value"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.ParseString(System.String)">
            <summary>
            Parses a JSON string into a string value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.ParseDate(System.String)">
            <summary>
            Parses Date Time values. Supports parsing values in various formats:
            
            new Date()
            MS Ajax Date Form (\/Date(xxxx)\/)
            ISO Date Format
            </summary>
            <param name="jsonDate"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.ParseObject(System.IO.StringReader,System.Type,System.Boolean)">
            <summary>
            Parsing routine specific to parsing an object. Note the recursive flag which 
            allows skipping over prefix information.
            </summary>
            <param name="Reader"></param>
            <param name="ValueType"></param>
            <param name="RecursiveCall"></param>
            <returns></returns>
        </member>
        <member name="F:Westwind.Web.JsonSerializers.WestwindJsonSerializer.arrayTerminatorChar">
            <summary>
            Parses a array and IList subtype 
            
            Supports only Objects as array items
            </summary>
            <param name="Reader"></param>
            <param name="ArrayType"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.ParseArray(System.IO.StringReader,System.Type)">
            <summary>
            Parses a JSON array string to its underlying array type.
            Requires:
            - Array must be of a single element type (ie. an object, or string or decimal)
            </summary>
            <remarks>
            Re-written by Joe McLain with modifications by Rick Strahl
            06/01/2008
            </remarks>
            <param name="reader"></param>
            <param name="arrayType"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.GetArrayType(System.Type)">
            <summary>
            Returns the type of item type of the array/collection
            </summary>
            <param name="arrayType"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.JsonSerializers.WestwindJsonSerializer.StripComma(System.Text.StringBuilder)">
            <summary>
            Strips a comma off a string builder. In Format mode
            ,\r\n are stripped
            </summary>
            <param name="sb"></param>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.WestwindJsonSerializer.DateSerializationMode">
            <summary>
            Encodes Dates as a JSON string value that is compatible
            with MS AJAX and is safe for JSON validators. If false
            serializes dates as new Date() expression instead.
            
            The default is true.
            </summary>
        </member>
        <member name="P:Westwind.Web.JsonSerializers.WestwindJsonSerializer.FormatJsonOutput">
            <summary>
            Determines if there are line breaks inserted into the 
            JSON to make it more easily human readable.
            </summary>
        </member>
        <member name="T:Westwind.Web.ScriptCompressionModule">
            <summary>
            Module that handles compression of JavaScript resources using GZip and
            script optimization that strips comments and extra whitespace.
            
            This module should be used in conjunction with
            ClientScriptProxy.RegisterClientScriptResource which sets up the proper URL
            formatting required for this module to handle requests. Format is:
            
            wwSc.axd?r=ResourceName&amp;t=FullAssemblyName
            
            The type parameter can be omitted if the resource lives in this assembly.
            
            To configure the module in web.config (for pre-IIS7):
            &lt;&lt;code lang="XML"&gt;&gt;&lt;system.web&gt;
            	&lt;httpModules&gt;
            		&lt;add name="ScriptCompressionModule"
            type="Westwind.Web.ScriptCompressionModule,Westwind.Web"/&gt;
            	&lt;/httpModules&gt;
            &lt;/system.web&gt;&lt;&lt;/code&gt;&gt;
            
            For IIS 7 Integrated mode:
            &lt;&lt;code lang="XML"&gt;&gt;&lt;system.webServer&gt;
              &lt;validation validateIntegratedModeConfiguration="false"/&gt;
              &lt;modules&gt;
                &lt;add name="ScriptCompressionModule"
            type="Westwind.Web.ScriptCompressionModule,Westwind.Web"/&gt;
                &lt;/modules&gt;
            &lt;/system.webServer&gt;&lt;&lt;/code&gt;&gt;
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptCompressionModule.WebResourceContentTypeCache">
            <summary>
            Stores resource names and their associated content types for lookup
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptCompressionModule.ScriptCompressionModuleActive">
            <summary>
            Global flag that is set when the module is first loaded by ASP.NET and 
            allows code to check whether the module is loaded.
            
            Used by ClientScriptProxy to determine if the module is active and 
            available in the ASP.NET Pipeline.
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.PostResolveRequestCache(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.SendErrorResponse(System.String)">
            <summary>
            Returns an error response to the client. Generates a 404 error
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.SendOutput(System.Byte[],System.Boolean)">
            <summary>
            Sends the output to the client using appropriate cache settings.
            Content should be already encoded and ready to be sent as binary.
            </summary>
            <param name="Output"></param>
            <param name="UseGZip"></param>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.OptimizeScript(System.String)">
            <summary>
            Very basic script optimization to reduce size:
            Remove any leading white space and any lines starting
            with //. 
            </summary>
            <param name="Script"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.FindAssembly(System.String)">
            <summary>
            Finds an assembly in the current loaded assembly list
            </summary>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.GZipMemory(System.Byte[])">
            <summary>
            Takes a binary input buffer and GZip encodes the input
            </summary>
            <param name="Buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.GZipMemory(System.String)">
            <summary>
            Takes a string input and GZip encodes the input
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.RegisterClientScriptResource(System.Type,System.String)">
            <summary>
            Embeds a link to a script resource into the page including the
            script tags. Uses Page.ClientScript so the link is embedded into
            the page content rather than the header.
            
            Preferrably use ClientScriptProxy.RegisterClientScriptInclude instead
            as it provides more options (including placement in header)
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>        
        </member>
        <member name="M:Westwind.Web.ScriptCompressionModule.GetClientScriptResourceUrl(System.Type,System.String)">
            <summary>
            Works like GetWebResourceUrl but can be used with javascript resources
            to allow using of resource compression (if the module is loaded).
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Web.WebResourceCacheItem">
            <summary>
            Item stored in the cache
            </summary>
        </member>
        <member name="T:Westwind.Web.ScriptVariables">
            <summary>
            Provides an easy way for server code to publish strings into client script 
            code. This object basically provides a mechanism for adding key value pairs
             and embedding those values into an object that is hosted on the client.
            
            This component supports:&lt;&lt;ul&gt;&gt;
            &lt;&lt;li&gt;&gt; Creating individual client side variables
            &lt;&lt;li&gt;&gt; Dynamic values that are 'evaluated' in OnPreRender to 
            pick up a value
            &lt;&lt;li&gt;&gt; Creating properties of ClientIDs for a given container
            &lt;&lt;li&gt;&gt; Changing the object values and POSTing them back on 
            Postback
            &lt;&lt;/ul&gt;&gt;
            
            You create a script variables instance and add new keys to it:
            &lt;&lt;code lang="C#"&gt;&gt;
            ScriptVariables scriptVars = new ScriptVariables(this,"scriptVars");
            
            // Simple value
            scriptVars.Add("userToken", UserToken);
            
            AmazonBook tbook = new AmazonBook();
            tbook.Entered = DateTime.Now;
            
            // Complex value marshalled
            scriptVars.Add("emptyBook", tbook);
            
            scriptVars.AddDynamic("author", txtAuthor,"Text");
            
            // Cause all client ids to be rendered as scriptVars.formFieldId vars (Id 
            postfix)
            scriptVars.AddClientIds(Form,true);
            &lt;&lt;/code&gt;&gt;
            
            In client code you can then access these variables:
            &lt;&lt;code lang="JavaScript"&gt;&gt;$( function() {
            	alert(scriptVars.book.Author);
            	alert(scriptVars.author);
            	alert( $("#" + scriptVars.txtAmazonUrlId).val() );
            });&lt;&lt;/code&gt;&gt;
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.ScriptVars">
            <summary>Edit
            Internally holds all script variables declared
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.Page">
            <summary>
            Internally tracked reference to the Page object
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.JsonSerializer">
            <summary>
            Internal instance of the Json Serializer used to serialize
            the object and deserialize the updateable fields
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.sbPrefixScriptCode">
            <summary>
            Internally tracked prefix code
            </summary>
        </member>
        <member name="F:Westwind.Web.ScriptVariables.SubmitCounter">
            <summary>
            Internal counter for submit script embedded
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Full constructor that receives an instance of any control object
            and the client name of the generated script object that contains
            the specified properties.
            </summary>
            <param name="control"></param>
            <param name="clientObjectName"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.#ctor(System.Web.UI.Control)">
            <summary>
            This constructor only takes an instance of a Control. The name of the
            client object generated will be serverVars.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.#ctor">
            <summary>
            This constructor can only be called AFTER a page instance has been created.
            This means OnInit() or later, but not in the constructor of the page.
            
            The name of the client object generated will be serverVars.
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.Page_PreRenderComplete(System.Object,System.EventArgs)">
            <summary>
            Implemented after Page's OnPreRender() has fired to ensure all
            page code has a chance to write script variables.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.Add(System.String,System.Object)">
            <summary>
            Adds a property and value to the client side object to be rendered into 
            JavaScript code. VariableName becomes a property on the object and the 
            value will be properly converted into JavaScript Compatible JSON text.
            <seealso>Class ScriptVariables</seealso>
            </summary>
            <param name="variableName">
            The name of the property created on the client object.
            </param>
            <param name="value">
            The value that is to be assigned. Can be any simple type and most complex 
            objects that can be serialized into JSON.
            </param>
            <example>
            &amp;lt;&amp;lt;code 
            lang=&amp;quot;C#&amp;quot;&amp;gt;&amp;gt;ScriptVariables scriptVars = new
             ScriptVariables(this,&amp;quot;serverVars&amp;quot;);
            
            // Add simple values
            scriptVars.Add(&amp;quot;name&amp;quot;,&amp;quot;Rick&amp;quot;);
            scriptVars.Add(&amp;quot;pageLoadTime&amp;quot;,DateTime.Now);
            
            // Add objects
            AmazonBook amazon = new AmazonBook();
            bookEntity book = amazon.New();
            
            scripVars.Add(&amp;quot;book&amp;quot;,book);
            &amp;lt;&amp;lt;/code&amp;gt;&amp;gt;
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.ScriptVariables.AddDynamicValue(System.String,System.Object,System.String)" -->
        <member name="M:Westwind.Web.ScriptVariables.AddClientIds(System.Web.UI.Control,System.Boolean)">
            <summary>
            Adds all the client ids for a container as properties of the client object.
             The name of the property is the ID + "Id" Example: txtNameId
            
            Note that there's no attempt made to  resolve naming conflicts in different
             naming containers. If there's a naming conflict last one wins.
            <seealso>Class ScriptVariables</seealso>
            </summary>
            <param name="container">
            The container from which to retrieve Client IDs. You can use Form or 
            this for the top level.
            </param>
            <param name="recursive">
            Determines whether ClientIDs are retrieved recursively by drilling into 
            containers. Use with care - large pages with many controls may take a long 
            time to find and serialize all control Ids. It's best to focus on the 
            controls you are interested and if necesary use multiple AddClientIds() 
            calls.
            </param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.AddClientIds(System.Web.UI.Control)">
            <summary>
            Adds all the client ids for a container as properties of the client object.
             The name of the property is the ID + "Id" Example: txtNameId This version 
            only retrieves ids for the specified container level - no hierarchical 
            recursion of controls is performed.
            <seealso>Class ScriptVariables</seealso>
            </summary>
            <param name="container">
            The container for which to retrieve client IDs.
            </param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.AddScriptBefore(System.String)">
            <summary>
            Any custom JavaScript code that is to immediately preceed the
            client object declaration. This allows setting up of namespaces
            if necesary for scoping.
            </summary>
            <param name="scriptCode"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.AddScriptAfter(System.String)">
            <summary>
            Any custom JavaScript code that is to immediately follow the
            client object declaration. This allows setting up of namespaces
            if necesary for scoping.
            </summary>
            <param name="scriptCode"></param>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.GetValue``1(System.String)">
            <summary>
            Returns a value that has been updated on the client 
            
            Note this method will throw if it is not called
            during PostBack or if AllowUpdates is false.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.GetItemValue``1(System.String)">
            <summary>
            Returns a value from the client Items collection
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.GetClientScript(System.Boolean)">
            <summary>
            Returns the rendered JavaScript for the generated object and name. 
            Note this method returns only the generated object, not the 
            related code to save updates.
            
            You can use this method with MVC Views to embedd generated JavaScript
            into the the View page.
            <param name="addScriptTags">If provided wraps the script text with script tags</param>
            </summary>
        </member>
        <member name="M:Westwind.Web.ScriptVariables.RenderClientScript">
            <summary>
            Explicitly forces the client script to be rendered into the page.
            This code is called automatically by the configured event handler that
            is hooked to Page_PreRenderComplete
            </summary>
        </member>
        <member name="P:Westwind.Web.ScriptVariables.ClientObjectName">
            <summary>
            The name of the object generated in client script code
            </summary>
        </member>
        <member name="P:Westwind.Web.ScriptVariables.AutoRenderClientScript">
            <summary>
            Determines whether the output object script is rendered
            automatically as part of Page PreRenderComplete. If false
            you can manually call the GetClientScript() method to
            retrieve the script as a string and embed it yourself.
            </summary>        
        </member>
        <member name="P:Westwind.Web.ScriptVariables.UpdateMode">
            <summary>
            Determines how updates to the server from the client are performed.
            If enabled changes to the client side properties post back to the
            server on a full Postback. 
            
            Options allow for none, updating the properties only or updating
            only the Items collection (use .add() on the client to add new items)
            </summary>
        </member>
        <member name="P:Westwind.Web.ScriptVariables.PostBackValue">
            <summary>
            Internal string of the postback value for the field values
            if AllowUpdates is true
            </summary>
        </member>
        <member name="F:Westwind.Web.PostBackModes.None">
            No Form data is posted (but there may still be some post state)
        </member>
        <member name="F:Westwind.Web.PostBackModes.Get">
            <summary>
            No POST data is posted back to the server
            </summary>
        </member>
        <member name="F:Westwind.Web.PostBackModes.Post">
            <summary>
            Only standard POST data is posted back - ASP.NET Post stuff left out
            </summary>
        </member>
        <member name="F:Westwind.Web.PostBackModes.PostNoViewstate">
            <summary>
            Posts back POST data but skips ViewState and EventTargets
            </summary>
        </member>
        <member name="F:Westwind.Web.PostBackModes.PostMethodParametersOnly">
            <summary>
            Posts only the method parameters and nothing else
            </summary>
        </member>
        <member name="F:Westwind.Web.JavaScriptCodeLocationTypes.EmbeddedInPage">
            <summary>
            Causes the Javascript code to be embedded into the page on every 
            generation. Fully self-contained.
            <seealso>Enumeration JavaScriptCodeLocationTypes</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.JavaScriptCodeLocationTypes.ExternalFile">
            <summary>
            Keeps the .js file as an external file in the Web application. If this is 
            set you should set the &lt;&lt;%= TopicLink([ScriptLocation],[_1Q01F9K4D]) 
            %&gt;&gt; Property to point at the location of the file.
            
            This option requires that you deploy the .js file with your application.
            <seealso>Enumeration JavaScriptCodeLocationTypes</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.JavaScriptCodeLocationTypes.WebResource">
            <summary>
            ASP.NET 2.0 option to generate a WebResource.axd call that feeds the .js 
            file to the client.
            <seealso>Enumeration JavaScriptCodeLocationTypes</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.JavaScriptCodeLocationTypes.None">
            <summary>
            Don't include any script - assume the page owner will handle it all
            </summary>
        </member>
        <member name="F:Westwind.Web.ProxyClassGenerationModes.Inline">
            <summary>
            The proxy is generated inline of the page.
            </summary>
        </member>
        <member name="F:Westwind.Web.ProxyClassGenerationModes.None">
            <summary>
            No proxy is generated at all
            </summary>
        </member>
        <member name="F:Westwind.Web.ProxyClassGenerationModes.jsdebug">
            <summary>
            Works only with CallbackHandler implementations
            that run as handlers at a distinct URL.
            JsonCallbacks.ashx/jsdebug
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwImageLink">
            <summary>
            Image Control that can act as a link.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.wwImageLink.NavigateUrl">
            <summary>
            The Url to navigate to when this image is clicked.
            </summary>
        </member>
        <member name="P:Westwind.Web.Controls.wwImageLink.Target">
            <summary>
            Optional - The target frame to display the result in.
            </summary>
        </member>
        <member name="T:Westwind.Web.Controls.wwTextBox">
            <summary>
            Textbox override that handles posting back of passwords.
            </summary>	
        </member>
        <member name="M:Westwind.Web.Controls.wwTextBox.OnLoad(System.EventArgs)">
            <summary>
            Overriden to handle displaying password characters from
            preloaded data (ASP.Net doesn't display Text in passwords)
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Westwind.Web.StaticCookieManager">
            <summary>
            A generic Web Cookie handler class that can be used for a single 'UserId' in an
            application. This class manages all aspects of retrieving and setting of a cookie
            consistently. Typically all you'll need to do is call the GetId() method which 
            both returns existing cookies and ensures that the cookie gets set.
            
            All methods of this class are static which is the reason why only a single Cookie
            can be managed at a time. The idea is that you can use this single cookie as an
            application global Cookie to track a user and then retrieve additional storage 
            information from other locations (like a database or session).
            </summary>
        </member>
        <member name="M:Westwind.Web.StaticCookieManager.WriteCookie(System.String,System.Boolean)">
            <summary>
            Writes the cookie into the response stream with the value passed. The value
             is always the UserId.
            <seealso>Class WebStoreCookie</seealso>
            </summary>
            <param name="String Value">
            Writes a value into the specified cookie.
            </param>
            <returns>Void</returns>
        </member>
        <member name="M:Westwind.Web.StaticCookieManager.WriteCookie(System.String)">
            <summary>
            Writes the cookie into the response stream with the value passed. The value
             is always the UserId.
            <seealso>Class WebStoreCookie</seealso>
            </summary>
            <param name="String Value">
            Writes a value into the specified cookie.
            </param>
            <returns>Void</returns>
        </member>
        <member name="M:Westwind.Web.StaticCookieManager.Remove">
            <summary>
            Removes the cookie by clearing it out and expiring it immediately.
            <seealso>Class WebStoreCookie</seealso>
            </summary>
            <returns>Void</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.StaticCookieManager.GetId" -->
        <member name="M:Westwind.Web.StaticCookieManager.CookieExist">
            <summary>
            Determines whether the cookie exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.StaticCookieManager.SetCookiePath(System.Web.HttpCookie,System.String)">
            <summary>
            Sets the Cookie Path
            </summary>
            <param name="Cookie"></param>
        </member>
        <member name="T:Westwind.Web.CookieManager">
            <summary>
            A generic Cookie class that manages an individual Cookie by localizing the
            cookie management into a single class. This means the Cookie's name and
            and timing is abstracted.
            
            The GetId() method is the key method here which retrieves a Cookie Id.
            If the cookie exists it returns the value, otherwise it generates a new
            Id and creates the cookie with the specs of the class and
            
            It's recommended you store this class as a static member off another
            object to have
            </summary>
        </member>
        <member name="F:Westwind.Web.CookieManager.CookieName">
            <summary>
            The name of the Cookie that is used. This value should always be set or 
            overridden via the constructor.
            <seealso>Class wwCookie</seealso>
            </summary>
        </member>
        <member name="F:Westwind.Web.CookieManager.CookieTimeoutInMonths">
            <summary>
            The timeout of a persistent cookie.
            <seealso>Class wwCookie</seealso>
            </summary>
        </member>
        <member name="M:Westwind.Web.CookieManager.WriteCookie(System.String,System.Boolean)">
            <summary>
            Writes the cookie into the response stream with the value passed. The value
            is always the UserId.
            <seealso>Class WebStoreCookie</seealso>
            </summary>
            <param name="Value"></param>
            <param name="NonPersistent"></param>
            <returns>Void</returns>
        </member>
        <member name="M:Westwind.Web.CookieManager.WriteCookie(System.String)">
            <summary>
            Writes the cookie into the response stream with the value passed. The value
            is always the UserId.
            <seealso>Class WebStoreCookie</seealso>
            </summary>
            <param name="Value"></param>
            <returns>Void</returns>
        </member>
        <member name="M:Westwind.Web.CookieManager.Remove">
            <summary>
            Removes the cookie by clearing it out and expiring it immediately.
            <seealso>Class WebStoreCookie</seealso>
            </summary>
            <param name=""></param>
            <returns>Void</returns>
        </member>
        <member name="M:Westwind.Web.CookieManager.GetId">
            <summary>
            This is the key method of this class that retrieves the value of the 
            cookie. This method is meant as retrieving an ID value. If the value 
            doesn't exist it is created and the cookie set and the value returned. If 
            the Cookie exists the value is retrieved and returned.
            <seealso>Class wwCookie</seealso>
            </summary>
            <param name=""></param>
            <returns>String</returns>
        </member>
        <member name="M:Westwind.Web.CookieManager.GenerateId">
            <summary>
            Method that generates the ID stored in the cookie. You can override
            this method in a subclass to handle custom or specific Id creation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.CookieManager.CookieExist">
            <summary>
            Determines whether the cookie exists
            <seealso>Class wwCookie</seealso>
            </summary>
            <param name=""></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Westwind.Web.CookieManager.SetCookiePath(System.Web.HttpCookie,System.String)">
            <summary>
            Sets the Cookie Path
            </summary>
            <param name="Cookie"></param>
        </member>
        <member name="T:Westwind.Web.ResponseFilterStream">
            <summary>
            A semi-generic Stream implementation to use with Response.Filter.
            Uses an event based interface for handling Content capture and 
            transformations with several variations of events that can 
            capture the entire output and transform it or work on actual
            Response Write() chunks individually.
            
            The key operational interface to this class is via exposed via Events  
            
            More information on how this class works:
            http://www.west-wind.com/weblog/posts/72596.aspx
            </summary>    
            <example>
            ResponseFilterStream filter = new ResponseFilterStream(Response.Filter);
            filter.TransformStream += filter_TransformStream;
            Response.Filter = filter;  
            </example>
        </member>
        <member name="F:Westwind.Web.ResponseFilterStream._stream">
            <summary>
            The original stream
            </summary>
        </member>
        <member name="F:Westwind.Web.ResponseFilterStream._position">
            <summary>
            Current position in the original stream
            </summary>
        </member>
        <member name="F:Westwind.Web.ResponseFilterStream._cacheStream">
            <summary>
            Stream that original content is read into
            and then passed to TransformStream function
            </summary>
        </member>
        <member name="F:Westwind.Web.ResponseFilterStream._cachePointer">
            <summary>
            Internal pointer that that keeps track of the size
            of the cacheStream
            </summary>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="responseStream"></param>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.OnTransformCompleteString(System.String)">
            <summary>
            Allows transforming of strings
            
            Note this handler is internal and not meant to be overridden
            as the TransformString Event has to be hooked up in order
            for this handler to even fire to avoid the overhead of string
            conversion on every pass through.
            </summary>
            <param name="responseText"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.OnTransformCompleteStringInternal(System.IO.MemoryStream)">
            <summary>
            Wrapper method form OnTransformString that handles
            stream to string and vice versa conversions
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.SetLength(System.Int64)">
            <summary>
            
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.Flush">
            <summary>
            Override flush by writing out the cached stream data
            </summary>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.ResponseFilterStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overriden to capture output written by ASP.NET and captured
            into a cached stream that is written out later when Flush()
            is called.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Westwind.Web.ResponseFilterStream.IsCaptured">
            <summary>
            Determines whether the stream is captured
            </summary>
        </member>
        <member name="P:Westwind.Web.ResponseFilterStream.IsOutputDelayed">
            <summary>
            Determines whether the Write method is outputting data immediately
            or delaying output until Flush() is fired.
            </summary>
        </member>
        <member name="E:Westwind.Web.ResponseFilterStream.CaptureStream">
            <summary>
            Event that captures Response output and makes it available
            as a MemoryStream instance. Output is captured but won't 
            affect Response output.
            
            This routine captures Response output in a MemoryStream.
            Use with care on large content.
            </summary>
        </member>
        <member name="E:Westwind.Web.ResponseFilterStream.CaptureString">
            <summary>
            Event that captures Response output and makes it available
            as a string. Output is captured but won't affect Response output.
            
            This routine captures Response output in a MemoryStream.
            Use with care on large content.
            </summary>
        </member>
        <member name="E:Westwind.Web.ResponseFilterStream.TransformWrite">
            <summary>
            Event that allows you transform the stream as each chunk of
            the output is written in the Write() operation of the stream.
            This means that that it's possible/likely that the input 
            buffer will not contain the full response output but only
            one of potentially many chunks.
            
            This event is called as part of the filter stream's Write() 
            operation. It does not cache output.
            </summary>
        </member>
        <member name="E:Westwind.Web.ResponseFilterStream.TransformWriteString">
            <summary>
            Event that allows you to transform the response stream as
            each chunk of bytep[] output is written during the stream's write
            operation. This means it's possibly/likely that the string
            passed to the handler only contains a portion of the full
            output. Typical buffer chunks are around 16k a piece.
            
            This event is called as part of the stream's Write operation.
            It does not cache output.
            </summary>
        </member>
        <member name="E:Westwind.Web.ResponseFilterStream.TransformStream">
            <summary>
            This event allows capturing and transformation of the entire 
            output stream by caching all write operations and delaying final
            response output until Flush() is called on the stream.
            
            This routine captures Response output in a MemoryStream.
            Use with care on large content.
            </summary>
        </member>
        <member name="E:Westwind.Web.ResponseFilterStream.TransformString">
            <summary>
            Event that can be hooked up to handle Response.Filter
            Transformation. Passed a string that you can modify and
            return back as a return value. The modified content
            will become the final output.
            
            This routine captures Response output in a MemoryStream.
            Use with care on large content.
            </summary>
        </member>
        <member name="P:Westwind.Web.ResponseFilterStream.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Westwind.Web.ResponseFilterStream.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:Westwind.Web.ResponseFilterStream.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Westwind.Web.ResponseFilterStream.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Westwind.Web.WebErrorHandler">
            <summary>
            Class handles generating Error strings for admin email and optional program display
            provides the same information that the ASP.Net error page displays, with the ability
            to retrieve into string and emailing.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.LogFileName">
            <summary>
            Name of the logfile. Filename is relative to the virtual Web root.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.CompactFormat">
            <summary>
            If true returns only the error message and URL.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.RetrieveSourceLines">
            <summary>
            Determines whether the routines attempt to retrieve Source Code lines.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.ErrorMessage">
            <summary>
            The runtime error message thrown by the application.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.RawUrl">
            <summary>
            The raw Web relative URL that caused this exception to occur. 
            Example: /WebStore/Item.aspx?sku=WWHELP
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.FullUrl">
            <summary>
            The completely qualified Url to this request.
            Example: http://www.west-wind.com/webstore/item.aspx?sku=WWSTOREDOTNET
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.StackTrace">
            <summary>
            Stack trace listing as available from the runtime compiler
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.SourceCode">
            <summary>
            The source code if available for the error that occurred. The code will include the 5 surrounding lines before and after.
            
            Source code is available only in Debug mode and if the source files are available on the server. Some errors that occur
            inside of the .Net runtime itself or in ASP.Net pages also do not show the error.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.IPAddress">
            <summary>
            The client's IP address
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.Login">
            <summary>
            The username of the user attached if the user is authenticated. 
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.Browser">
            <summary>
            The client's browser string.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.Referer">
            <summary>
            The referring Url that was used to access the current page that caused the error. 
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.PostBuffer">
            <summary>
            Content of the POST buffer if the page was posted. The size is limited to 2k. Larger buffers are stripped.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.ContentSize">
            <summary>
            The size of the POST buffer if data was posted.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.QueryString">
            <summary>
            The complete querystring.
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.Locale">
            <summary>
            The Locale string returned by the browser
            </summary>
        </member>
        <member name="F:Westwind.Web.WebErrorHandler.Time">
            <summary>
            The time the error was logged.
            </summary>
        </member>
        <member name="M:Westwind.Web.WebErrorHandler.#ctor(System.Exception)">
            <summary>
            Public constructor requires that an exception is passed in. Generally you'll want to do this is in Application_Error
            and pass in in the InnerException of the error:
            
            WebErrorHandler Handler = new WebErrorHandler(Server.GetLastError().InnerException);
            </summary>
            <param name="lastError">The Exception to log</param>
        </member>
        <member name="M:Westwind.Web.WebErrorHandler.#ctor">
            <summary>
            Parameterless constructor. Use only if you want to use the 
            maintenance methods (Show, ClearLog etc)  of this class. All
            processinging functions require that the Exception is passed.
            </summary>
        </member>
        <member name="M:Westwind.Web.WebErrorHandler.Parse">
            <summary>
            Parses the Exception into properties of this object. Called internally 
            by LogError, but can also be called externally to get easier information
            about the error through the property interface.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Web.WebErrorHandler.ToString" -->
        <member name="M:Westwind.Web.WebErrorHandler.LogErrorToXml(System.Boolean)">
            <summary>
            Logs an error to the XML file specified in the 
            </summary>
            <param name="LogAsString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebErrorHandler.LogErrorToXml">
            <summary>
            Logs the current Exception state to the logfile in XML format. The item is logged as individual elements.
            </summary>
        </member>
        <member name="M:Westwind.Web.WebErrorHandler.LogErrorToSql(System.String)">
            <summary>
            Logs the error to Sql Server through the WebRequestLog
            </summary>
            <param name="ConnectionString"></param>
            <param name="LogAsString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebErrorHandler.ShowXmlLog">
            <summary>
            Displays the log as an ASP.Net response.
            </summary>
            <returns>true or false. False likely means file doesn't exist or access is denied.</returns>
        </member>
        <member name="M:Westwind.Web.WebErrorHandler.ClearXmlLog">
            <summary>
            Tries to delete the log file.
            </summary>
            <returns>true or false. False likely means file doesn't exist or access is denied.</returns>
        </member>
        <member name="T:Westwind.Web.WebRequestLog">
            <summary>
            This class provides the ability to log requests into a SQL Server table.
            It's best called of the Application_BeginRequest/EndRequest event in global.asax.
            It can optionally log a request duration.
            </summary>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.Log(System.String,System.Boolean,System.DateTime)">
            <summary>
            Parses the Exception into properties of this object. Called internally
            by LogError, but can also be called externally to get easier information
            about the error through the property interface.
            <seealso>Class WebRequestLog</seealso>
            </summary>
            <param name="ConnectionString"></param>
            <param name="CompactFormat"></param>
            <param name="StartTime">
            If you want to log a duration pass in a time the request was started or 
            pass DateTime.MinValue
            </param>
            <returns>bool</returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.LogCustomMessage(System.String,Westwind.Web.WebRequestLogMessageTypes,System.String)">
            <summary>
            Logs a custom message. Use for logging errors application messages and anything else you need to customize
            </summary>
            <param name="ConnectionString"></param>
            <param name="StartTime">If you want to log a duration pass in a time the request was started or pass DateTime.MinValue</param>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.RetrieveLogTable(System.String)">
            <summary>
            Returns the entire log table. All Types, all dates...
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.RetrieveLogTable(System.String,System.Int32)">
            <summary>
            Returns the last number of requests from the log
            </summary>
            <param name="ConnectionString"></param>
            <param name="LastRecordCountToReturn"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.RetrieveLogTable(System.String,System.DateTime)">
            <summary>
            Returns the log since a given date.
            </summary>
            <param name="ConnectionString"></param>
            <param name="RetrievalStartDate"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.RetrieveLogTable(System.String,System.String)">
            <summary>
            Internal worker method that retrieves the 
            </summary>
            <param name="StartDate"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.RetrieveErrors(System.String)">
            <summary>
            Returns all Errors in the file
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.RetrieveApplicationMessages(System.String)">
            <summary>
            Returns all Application Messages
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.ClearLog(System.String)">
            <summary>
            Clear the log completely.
            </summary>
            <param name="ConnectionString"></param>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.ClearLog(System.String,System.DateTime)">
            <summary>
            Clear the log up until a specific date.
            </summary>
            <param name="ConnectionString"></param>
            <param name="ClearUntilTime"></param>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.ClearLog(System.String,System.String)">
            <summary>
            Clears the log with a filter condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.GetLogCount(System.String)">
            <summary>
            Returns a count of how many entires there are in the log.
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.Retrieve24HourSummary(System.String)">
            <summary>
            Returns a two column summary table that shows Hour of day and hits for the last 24 hour period.
            Field names are  Hits (int), Day (int), Hour (int), Day (int) and AvgTime (float) sorted by day, hour
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.CreateLogTable(System.String)">
            <summary>
            Creates the Table that receives log requests. Must pass a valid connection string
            to the database that will be receive these log requests.
            </summary>
            <param name="ConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.GetSqlCommand(System.String,System.String)">
            <summary>
            Helper function to open the connection to the database.
            </summary>
            <param name="ConnectionString"></param>
            <param name="Sql"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.GetSqlCommand(System.String,System.String,System.Boolean)">
            <summary>
            Helper function to open connection and retrieve Sql Command
            </summary>
            <param name="ConnectionString"></param>
            <param name="Sql"></param>
            <param name="OpenConnection"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Web.WebRequestLog.CloseConnection(System.Data.SqlClient.SqlCommand)">
            <summary>
            Closes the Command/Connection.
            </summary>
            <param name="Command"></param>
        </member>
        <member name="T:Westwind.Utilities.WebUtils">
            <summary>
            Summary description for wwWebUtils.
            </summary>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.ResolveUrl(System.String)">
            <summary>
            Returns a site relative HTTP path from a partial path starting out with a ~.
            Same syntax that ASP.Net internally supports but this method can be used
            outside of the Page framework.
            
            Works like Control.ResolveUrl including support for ~ syntax
            but returns an absolute URL.
            </summary>
            <param name="originalUrl">Any Url including those starting with ~ for virtual base path replacement</param>
            <returns>relative url</returns>
            <remarks>
            Returns the path as relative of current location (ie. ./link.htm) if 
            HttpContext is not available. Note that this may result in some scenarios where
            an invalid URL is returned if HttpContext is not present, but it allows for test
            scenarios.
            </remarks>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.ResolveServerUrl(System.String,System.Boolean)">
            <summary>
            This method returns a fully qualified absolute server Url which includes
            the protocol, server, port in addition to the server relative Url.
            
            Works like Control.ResolveUrl including support for ~ syntax
            but returns an absolute URL.
            </summary>
            <param name="ServerUrl">Any Url, either App relative (~/default.aspx) 
            or fully qualified</param>
            <param name="forceHttps">if true forces the url to use https</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.ResolveServerUrl(System.String)">
            <summary>
            This method returns a fully qualified absolute server Url which includes
            the protocol, server, port in addition to the server relative Url.
            
            It work like Page.ResolveUrl, but adds these to the beginning.
            This method is useful for generating Urls for AJAX methods
            </summary>
            <param name="ServerUrl">Any Url, either App relative or fully qualified</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetFullApplicationPath">
            <summary>
            Returns the Application Path as a full Url with scheme 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetControlAppRelativePath(System.Web.UI.Control)">
            <summary>
            Returns the executing ASPX, ASCX, MASTER page for a control instance.
            Path is returned app relative without a leading slash
            </summary>
            <param name="Ctl"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.ScriptLink(System.String)">
            <summary>
            Inserts a &lt;script&gt; source link into the page.
            Includes carriage return at end.
            </summary>
            <param name="url">The url to the script to load. Url is resolved</param>
            <returns>full script tag</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.jQueryLink(Westwind.Web.jQueryLoadModes,System.String)">
            <summary>
            Injects a full jQuery script link and CDN fallback (if using CDN) into the page.
            Version information and CDN Urls are based on the static settings in the <see cref="!:System.Web.ControlResources"/> class.
            </summary>
            <param name="mode">Optional: Determines where jQuery is loaded from (CDN, WebResources, Script)</param>        
            <param name="url">Optional url from where to load jQuery</param>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.CssLink(System.String)">
            <summary>
            Inserts a CSS &lt;link&gt; tag into the page.
            Includes carriage return at end.
            </summary>
            <param name="url">The url to the CSS file to load. Url is resolved</param>
            <returns>full CSS link tag</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.ImageFormatToContentType(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts an ImageFormat value to a Web Content Type
            </summary>
            <param name="formatGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.ImageFormatFromContentType(System.String)">
            <summary>
            Returns an image format from an HTTP content type string
            </summary>
            <param name="contentType">Content Type like image/jpeg</param>
            <returns>Corresponding image format</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.SetUserLocale(System.String,System.Boolean)">
            <summary>
            Sets a user's Locale based on the browser's Locale setting. If no setting
            is provided the default Locale is used.
            </summary>
            <param name="currencySymbol">If not null overrides the currency symbol for the culture. 
            Use to force a specify currency when multiple currencies are not supported by the application
            </param>
            <param name="setUiCulture">if true sets the UI culture in addition to core culture</param>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.SetUserLocale(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets the culture and UI culture to a specific culture. Allows overriding of currency
            and optionally disallows setting the UI culture.
            </summary>
            <param name="culture"></param>
            <param name="uiCulture"></param>
            <param name="currencySymbol"></param>
            <param name="setUiCulture"></param>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.FindControlRecursive(System.Web.UI.Control,System.String,System.Boolean)">
            <summary>
            Finds a Control recursively. Note finds the first match and exits
            </summary>
            <param name="ContainerCtl">The top level container to start searching from</param>
            <param name="IdToFind">The ID of the control to find</param>
            <param name="alwaysUseFindControl">If true uses FindControl to check for hte primary Id which is slower, but finds dynamically generated control ids inside of INamingContainers</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.RestartWebApplication">
            <summary>
            Attempts to restart the active Web Application               
            </summary>
            <remarks>
            Requires either Full Trust (HttpRuntime.UnloadAppDomain) or
            or Write access to web.config otherwise the operation
            will fail and return false.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Utilities.WebUtils.FormVarsToObject(System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:Westwind.Utilities.WebUtils.FormVarsToDataRow(System.Data.DataRow,System.String,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="M:Westwind.Utilities.WebUtils.ForceReload">
            <summary>
            Creates the headers required to force the current request to not go into 
            the client side cache, forcing a reload of the page.
            
            This method can be called anywhere as part of the Response processing to 
            modify the headers. Use this for any non POST pages that should never be 
            cached.
            <seealso>Class WebUtils</seealso>
            </summary>
            <param name="Response"></param>
            <returns>Void</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.AspTextMerge(System.String,System.String@)">
            <summary>
            Returns the result from an ASPX 'template' page in the /templates directory of this application.
            This method uses an HTTP client to call into the Web server and retrieve the result as a string.
            </summary>
            <param name="templatePageAndQueryString">The name of a page (ASPX, HTM etc.)  to retrieve plus the querystring
            Examples: webform1.aspx, subfolder/WebForm1.aspx, ~/WebForm1.aspx,/myVirtual/WebForm1.aspx
            </param>
            <param name="errorMessage">If this method returns null this message will contain the error info</param>
            <returns>Merged Text or null if an HTTP error occurs - note: could also return an Error page HTML result if the template page has an error.</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.RenderControl(System.Web.UI.Control)">
            <summary>
            Renders a control to a string - useful for AJAX return values
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.RenderControl(System.Web.UI.Control,System.Boolean)">
            <summary>
            Renders a control dynamically by creating a new Page and Form
            control and then adding the control to be rendered to it.        
            </summary>
            <remarks>
            This routine works to render most Postback controls but it
            has a bit of overhead as it creates a separate Page instance        
            </remarks>
            <param name="control">The control that is to be rendered</param>
            <param name="useDynamicPage">if true forces a Page to be created</param>
            <returns>Html or empty</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.RenderUserControl(System.String,System.Boolean,System.Object)">
            <summary>
            Renders a user control into a string into a string.
            </summary>
            <param name="page">Instance of the page that is hosting the control</param>
            <param name="userControlVirtualPath"></param>
            <param name="includePostbackControls">If false renders using RenderControl, otherwise uses Server.Execute() constructing a new form.</param>
            <param name="data">Optional Data parameter that can be passed to the User Control IF the user control has a Data property.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.RenderUserControl(System.String,System.Boolean)">
            <summary>
            Renders a user control into a string into a string.
            </summary>
            <param name="userControlVirtualPath">virtual path for the user control</param>
            <param name="includePostbackControls">If false renders using RenderControl, otherwise uses Server.Execute() constructing a new form.</param>
            <param name="data">Optional Data parameter that can be passed to the User Control IF the user control has a Data property.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetUrlPath(System.String)">
            <summary>
            Returns just the Path of a full Url. Strips off the filename and querystring
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetAppRelativePath(System.String)">
            <summary>
            Translates an ASP.NET path like /myapp/subdir/page.aspx 
            into an application relative path: subdir/page.aspx. The
            path returned is based of the application base and 
            starts either with a subdirectory or page name (ie. no ~)
            
            The path is turned into all lower case.
            </summary>
            <param name="logicalPath">A logical, server root relative path (ie. /myapp/subdir/page.aspx)</param>
            <returns>Application relative path (ie. subdir/page.aspx)</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetAppRelativePath">
            <summary>
            Translates the current ASP.NET path  
            into an application relative path: subdir/page.aspx. The
            path returned is based of the application base and 
            starts either with a subdirectory or page name (ie. no ~)
            
            This version uses the current ASP.NET path of the request
            that is active and internally uses AppRelativeCurrentExecutionFilePath
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.IsGZipSupported">
            <summary>
            Determines if GZip is supported
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GZipEncodePage">
            <summary>
            Sets up the current page or handler to use GZip through a Response.Filter
            IMPORTANT:  
            You have to call this method before any output is generated!
            </summary>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetUrlEncodedKey(System.String,System.String)">
            <summary>
            Retrieves a value by key from a UrlEncoded string.
            </summary>
            <param name="urlEncodedString">UrlEncoded String</param>
            <param name="key">Key to retrieve value for</param>
            <returns>returns the value or "" if the key is not found or the value is blank</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetParamsInt(System.String)">
            <summary>
            Returns a request value parsed into an integer. If the value is not found
            or not a number null is returned.
            </summary>
            <param name="paramsKey">The request key to retrieve</param>        
            <returns>parsed integer or null on failure</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetParamsInt(System.String,System.Int32)">
            <summary>
            Returns a request value parsed into an integer with an optional 
            default value set if the conversion fails.
            </summary>
            <param name="paramsKey"></param>
            <param name="defaultValue">defaults to -1</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.FormBufferToString">
            <summary>
            Returns the content of the POST buffer as string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.TextListToHtmlList(System.String)">
            <summary>
            Parses a Carriage Return based into a &lt;ul&gt; style HTML list by 
            splitting each carriage return separated line.
            <seealso>Class WebUtils</seealso>
            </summary>
            <param name="text">
            The carriage return separated text list
            </param>
            <returns>string</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.EncodeJsString(System.String)">
            <summary>
            Encodes a string to be represented as a string literal. The format
            is essentially a JSON string that is returned in double quotes.
            
            The string returned includes outer quotes: 
            "Hello \"Rick\"!\r\nRock on"
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.DecodeJsString(System.String)">
            <summary>
            Parses a JSON string into a string value
            </summary>
            <param name="encodedString">JSON string</param>
            <returns>unencoded string</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.UnicodeEscapeMatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Matchevaluated to unescape string encoded Unicode character in the format of \u03AF
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.EncodeJsDate(System.DateTime,Westwind.Web.JsonSerializers.JsonDateEncodingModes)">
            <summary>
            Converts a .NET date to a JavaScript JSON date value. Several
            different formats are supported (new Date(), MsAjax style strings
            and ISO date strings).
            </summary>
            <param name="date">.Net Date</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.EncodeJsDate(System.DateTime)">
            <summary>
            Converts a .NET date to a JavaScript date value.
            
            This version creates a new Date(xxx) expression.
            </summary>
            <param name="date">.NET Date value</param>
            <returns>new Date(xxxx)</returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GRes(System.String,System.String)">
            <summary>
            Returns a resource string. Shortcut for HttpContext.GetGlobalResourceObject.
            </summary>
            <param name="resourceSet">Resource Set Id (ie. name of the file or 'resource set')</param>
            <param name="resourceId">The key in the resource set</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GRes(System.String)">
            <summary>
            Returns a resource string. Shortcut for HttpContext.GetGlobalResourceObject.
            
            This version defaults to Resources as the resource set it.
            Defaults to "Resources" as the ResourceSet (ie. Resources.xx.resx)
            </summary>
            <param name="resourceId">Key in the Resources resource set</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GResJs(System.String,System.String)">
            <summary>
            Returns a JavaScript Encoded string from a Global Resource
            </summary>
            <param name="classKey"></param>
            <param name="resourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.LRes(System.String)">
            <summary>
            Returns a local resource from the resource set of the current active request
            local resource.
            </summary>       
            <param name="resourceId">The resourceId of the item in the local resourceSet file to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.LRes(System.String,System.String)">
            <summary>
            Returns a local resource for the given resource set that you specify explicitly.
            
            Use this method only if you need to retrieve resources from a local resource not
            specific to the current request.
            </summary>
            <param name="resourceSet">The resourceset specified as: subdir/page.aspx or page.aspx or as a virtual path (~/subdir/page.aspx)</param>
            <param name="resourceKey">The resource ID to retrieve from the resourceset</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.LResJs(System.String)">
            <summary>
            Returns a local resource properly encoded as a JavaScript string 
            including the quote characters.
            </summary>
            <param name="resourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GResJs(System.String)">
            <summary>
            Returns a JavaScript Encoded string from a Global Resource
            Defaults to the "Resources" resource set.
            </summary>
            <param name="resourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.WebUtils.GetIisVersion">
            <summary>
            Returns the IIS version for the given Operating System.
            Note this routine doesn't check to see if IIS is installed
            it just returns the version of IIS that should run on the OS.
            
            Returns the value from Request.ServerVariables["Server_Software"]
            if available. Otherwise uses OS sniffing to determine OS version
            and returns IIS version instead.
            </summary>
            <returns>version number or -1 </returns>
        </member>
    </members>
</doc>
